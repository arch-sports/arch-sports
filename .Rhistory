high_con = c('Con. Assym. >10%', high_con_count, round(high_con_count/total*100, 1)),
low_land = c('Landing Assym. btw 5-10%', low_land_count, round(low_land_count/total*100, 1)),
high_land = c('Landing Assym. >10%', high_con_count, round(high_con_count/total*100, 1))
)
t_output_all <- t(output_all)
kable(t_output_all,
caption = 'Counts of Athletes',
row.names = FALSE,
col.names = c(' ', 'Count', paste('% Total (', length(data$jump_height), ')', sep = ''))
)
kable(t_output_all,
caption = 'Counts of Athletes',
row.names = FALSE,
col.names = c(' ', 'Count', paste('% Total (', length(data$jump_height), ')', sep = ''))
)
data_filter <- data[data$ecc_mean_force_assym > 0.10, ]
total <- length(data_filter$jump_height)
total <- length(data_filter$jump_height)
quad_count <- length(which(data_filter$quad == 'N'))
hip_count <- length(which(data_filter$gator == 'N'))
lat_count <- length(which(data_filter$lat == 'Y'))
calf_count <- length(which(data_filter$calf == 'Y'))
pain_count <- length(which(data_filter$pain == 'Y'))
output_filter <- data.frame(
quad = c('Quad Tightness', quad_count, round(quad_count/total*100, 1)),
hip = c('Hip Weakness', hip_count, round(hip_count/total*100, 1)),
lat = c('Lat Tightness', lat_count, round(lat_count/total*100, 1)),
calf = c('Calf Tightness', calf_count, round(calf_count/total*100, 1)),
pain = c('Pain History', pain_count, round(pain_count/total*100, 1))
)
t_output_filter <- t(output_filter)
kable(t_output_filter,
caption = 'Counts of Athletes with Ecc. Assym. >10%',
row.names = FALSE,
col.names = c(' ', 'Count', paste('% Total (', length(data_filter$jump_height), ')', sep = ''))
)
kable(t_output_filter,
caption = 'Counts of Athletes with Ecc. Assym. >10%',
row.names = FALSE,
col.names = c(' ', 'Count', paste('% Total (', length(data_filter$jump_height), ')', sep = ''))
)
data_filter <- data[data$con_mean_force_assym > 0.10, ]
data_filter <- data[data$con_mean_force_assym > 0.10, ]
total <- length(data_filter$jump_height)
quad_count <- length(which(data_filter$quad == 'N'))
hip_count <- length(which(data_filter$gator == 'N'))
lat_count <- length(which(data_filter$lat == 'Y'))
calf_count <- length(which(data_filter$calf == 'Y'))
pain_count <- length(which(data_filter$pain == 'Y'))
output_filter <- data.frame(
quad = c('Quad Tightness', quad_count, round(quad_count/total*100, 1)),
hip = c('Hip Weakness', hip_count, round(hip_count/total*100, 1)),
lat = c('Lat Tightness', lat_count, round(lat_count/total*100, 1)),
calf = c('Calf Tightness', calf_count, round(calf_count/total*100, 1)),
pain = c('Pain History', pain_count, round(pain_count/total*100, 1))
)
t_output_filter <- t(output_filter)
kable(t_output_filter,
caption = 'Counts of Athletes with Con. Assym. >10%',
row.names = FALSE,
col.names = c(' ', 'Count', paste('% Total (', length(data_filter$jump_height), ')', sep = ''))
)
data_filter <- data[data$peak_assym > 0.10, ]
total <- length(data_filter$jump_height)
quad_count <- length(which(data_filter$quad == 'N'))
hip_count <- length(which(data_filter$gator == 'N'))
lat_count <- length(which(data_filter$lat == 'Y'))
calf_count <- length(which(data_filter$calf == 'Y'))
pain_count <- length(which(data_filter$pain == 'Y'))
output_filter <- data.frame(
quad = c('Quad Tightness', quad_count, round(quad_count/total*100, 1)),
hip = c('Hip Weakness', hip_count, round(hip_count/total*100, 1)),
lat = c('Lat Tightness', lat_count, round(lat_count/total*100, 1)),
calf = c('Calf Tightness', calf_count, round(calf_count/total*100, 1)),
pain = c('Pain History', pain_count, round(pain_count/total*100, 1))
)
t_output_filter <- transpose(output_filter)
kable(t_output_filter,
caption = 'Counts of Athletes with Landing Assym. >10%',
row.names = FALSE,
col.names = c(' ', 'Count', paste('% Total (', length(data_filter$jump_height), ')', sep = ''))
)
View(t_output_filter)
View(t_output_all)
View(data)
?add_header_above
x <- knitr::kable(head(mtcars), "html")
# Add a row of header with 3 columns on the top of the table. The column
# span for the 2nd and 3rd one are 5 & 6.
add_header_above(x, c(" ", "Group 1" = 5, "Group 2" = 6))
x <- knitr::kable(head(mtcars), "html")
# Add a row of header with 3 columns on the top of the table. The column
# span for the 2nd and 3rd one are 5 & 6.
add_header_above(x, c(" ", "Group 1" = 5, "Group 2" = 6))
t_output_all <- t(output_all)
kable_all <- kable(t_output_all,
caption = 'Counts of Athletes',
row.names = FALSE,
col.names = c('', 'Count', paste('% Total (', length(data$jump_height), ')', sep = '')),
format = 'html',
align = 'lcc',
valign = 't'
)
kable_ecc <- kable(t_output_filter,
caption = 'Athletes with Ecc. Assym. >10%',
row.names = FALSE,
col.names = c('', 'Count', paste('% Total (', length(data_filter$jump_height), ')', sep = '')),
format = 'html',
align = 'lcc',
valign = 't'
)
kable_con <- kable(t_output_filter,
caption = 'Athletes with Con. Assym. >10%',
row.names = FALSE,
col.names = c('', 'Count', paste('% Total (', length(data_filter$jump_height), ')', sep = '')),
format = 'html',
align = 'lcc',
valign = 't'
)
kable_land <- kable(t_output_filter,
caption = 'Athletes with Landing Assym. >10%',
row.names = FALSE,
col.names = c('', 'Count', paste('% Total (', length(data_filter$jump_height), ')', sep = '')),
format = 'html',
align = 'lcc',
valign = 't'
)
cbind(kable_ecc, kable_con, kable_land)
kable_full <- cbind(kable_ecc, kable_con, kable_land)
kable_full
x <- knitr::kable(head(mtcars), "html")
# Add a row of header with 3 columns on the top of the table. The column
# span for the 2nd and 3rd one are 5 & 6.
add_header_above(x, c(" ", "Group 1" = 5, "Group 2" = 6))
df <- data.frame(First = c(1:5), Second = c(6:10))
df
test <- 'Third'
df[test] <- c(11:15)
df
rm(df)
rm(test)
best_df <- data.frame()
# Get each athlete's best scores
for (athlete in athletes) {
find_min <- c('10 Yard Split', '20 Yard Sprint', '5-10-5', 'Nordbord % Diff')
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date)
best <- sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
best <- ifelse(ncol(best) == ncol(best_df), best, t(best))
best_df <- rbind(best_df, best)
#names(best_df) <- names(athlete_data)
}
source("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Monthly Reporting/monthly_report.R")
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date)
best <- sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
best <- ifelse(ncol(best) == ncol(best_df), best, t(best))
best_df <- rbind(best_df, best)
View(best_df)
best_df <- data.frame()
find_min <- c('10 Yard Split', '20 Yard Sprint', '5-10-5', 'Nordbord % Diff')
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date)
best <- sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
best <- ifelse(ncol(best) == ncol(best_df), best, t(best))
find_min <- c('10 Yard Split', '20 Yard Sprint', '5-10-5', 'Nordbord % Diff')
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date)
best <- if(nrow(athlete_data) ==1){
athlete_data
} else {
sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
}
best <- if(nrow(athlete_data) ==1){
athlete_data
} else {
sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
}
best_df <- rbind(best_df, best)
athlete <- 'Delaney Newton'
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date)
best <- if(nrow(athlete_data) ==1){
athlete_data
} else {
sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
}
best_df <- rbind(best_df, best)
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date)
best <- if(nrow(athlete_data) ==1){
athlete_data
} else {
sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
}
best_df <- rbind(best_df, best[1,])
best_df <- data.frame()
find_min <- c('10 Yard Split', '20 Yard Sprint', '5-10-5', 'Nordbord % Diff')
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date)
best <- if(nrow(athlete_data) ==1){
athlete_data
} else {
sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
}
best_df <- rbind(best_df, best[1,])
names(best_df) <- names(athlete_data)
athlete <- 'Andrea Rios'
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date)
best <- if(nrow(athlete_data) ==1){
athlete_data
} else {
sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
}
best_df <- rbind(best_df, best[1,])
best_df <- data.frame()
# Get each athlete's best scores
for (athlete in athletes) {
find_min <- c('10 Yard Split', '20 Yard Sprint', '5-10-5', 'Nordbord % Diff')
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date)
best <- if(nrow(athlete_data) ==1){
athlete_data
} else {
sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
}
best_df <- rbind(best_df, best[1,])
names(best_df) <- names(athlete_data)
}
source("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Monthly Report/monthly_report.R")
View(best_df)
View(data_last)
data_current[data_current$Name == 'Delaney Newton',] - data_last[data_last$Name == 'Delaney Newton',]
data_current[data_current$Name == 'Delaney Newton',]
data_current[data_current$Name == 'Delaney Newton',] - 2
View(data)
columns <- data %>%
select(-Date, -'Age At Testing') %>%
names()
data[1, -2:3]
data[1, -2:-3]
data_current[data_current$Name == 'Delaney Newton', 3:]
data_current[data_current$Name == 'Delaney Newton', 3:ncol(data_current)]
improvement <- data_current[data_current$Name == athlete, 4:ncol(data_current)] -
data_last[data_current$Name == athlete, 4:ncol(data_last)]
improvement <- data_current[data_current$Name == athlete, 4:ncol(data_current)] -
data_last[data_last$Name == athlete, 4:ncol(data_last)]
data_current[data_current$Name == athlete,]
data_last[data_last$Name == athlete,]
rep(1,2)
rep(1,0)
?elif
source("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Monthly Report/monthly_report.R")
View(improvement)
improve_df <- data.frame()
# Get each athlete's improvement from last month
for (athlete in athletes) {
columns <- data %>%
select(-Name, -Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, 4:ncol(data_current)]
athlete_last    <- data_last[data_last$Name == athlete, 4:ncol(data_last)]
improvement <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
} %>%
mutate(Name = athlete)
improve_df <- rbind(improve_df, improvement)
}
View(improve_df)
improvement <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
} %>%
mutate(Name = athlete)
improvement <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
improvement <- mutate(improvement,
Name = athlete)
improve_df <- rbind(improve_df, improvement)
improve_df <- data.frame()
# Get each athlete's improvement from last month
for (athlete in athletes) {
columns <- data %>%
select(-Name, -Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, 4:(ncol(data_current) - 3)]
athlete_last    <- data_last[data_last$Name == athlete, 4:(ncol(data_last) - 3)]
improvement <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
improvement <- mutate(improvement,
Name = athlete)
improve_df <- rbind(improve_df, improvement)
}
View(improve_df)
# Get each athlete's improvement from last month
for (athlete in athletes) {
columns <- data %>%
select(-Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, 4:(ncol(data_current) - 3)]
athlete_last    <- data_last[data_last$Name == athlete, 4:(ncol(data_last) - 3)]
improvement <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
improve_df <- rbind(improve_df, improvement)
}
improvement <- mutate(improvement,
Name = athlete)
# Get each athlete's improvement from last month
for (athlete in athletes) {
columns <- data %>%
select(-Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, 4:(ncol(data_current) - 3)]
athlete_last    <- data_last[data_last$Name == athlete, 4:(ncol(data_last) - 3)]
improvement <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
improvement <- mutate(improvement,
Name = athlete)
improve_df <- rbind(improve_df, improvement)
}
improve_df <- data.frame()
improve_df <- data.frame()
# Get each athlete's improvement from last month
for (athlete in athletes) {
columns <- data %>%
select(-Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, 4:(ncol(data_current) - 3)]
athlete_last    <- data_last[data_last$Name == athlete, 4:(ncol(data_last) - 3)]
improvement <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
# improvement <- mutate(improvement,
#                       Name = athlete)
improve_df <- rbind(improve_df, improvement)
}
athlete_current <- data_current[data_current$Name == athlete, c(1,4:(ncol(data_current) - 3))]
athlete_last    <- data_last[data_last$Name == athlete, c(1,4:(ncol(data_last) - 3))]
View(athlete_current)
improvement <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
View(improvement)
improve_df <- rbind(improve_df, improvement)
improve_df <- data.frame()
improve_df <- rbind(improve_df, improvement)
View(improve_df)
improve_df <- data.frame()
# Get each athlete's improvement from last month
for (athlete in athletes) {
columns <- data %>%
select(-Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, c(1,4:(ncol(data_current) - 3))]
athlete_last    <- data_last[data_last$Name == athlete, c(1,4:(ncol(data_last) - 3))]
improvement <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
# improvement <- mutate(improvement,
#                       Name = athlete)
improve_df <- rbind(improve_df, improvement)
}
View(improve_df)
improve_df <- data.frame()
# Get each athlete's improvement from last month
for (athlete in athletes) {
columns <- data %>%
select(-Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, c(1,4:(ncol(data_current) - 3))]
athlete_last    <- data_last[data_last$Name == athlete, c(1,4:(ncol(data_last) - 3))]
improvement <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
# improvement <- mutate(improvement,
#                       Name = athlete)
improve_df <- rbind(improve_df, improvement)
}
improve_df <- data.frame()
# Get each athlete's improvement from last month
for (athlete in athletes) {
columns <- data %>%
select(-Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, c(1,4:(ncol(data_current) - 3))]
athlete_last    <- data_last[data_last$Name == athlete, c(1,4:(ncol(data_last) - 3))]
improvement <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
# improvement <- mutate(improvement,
#                       Name = athlete)
improve_df <- rbind(improve_df, improvement)
}
improve_df <- data.frame()
# Get each athlete's improvement from last month
for (athlete in athletes) {
columns <- data %>%
select(-Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, 4:(ncol(data_current) - 3)]
athlete_last    <- data_last[data_last$Name == athlete, 4:(ncol(data_last) - 3)]
improvement <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
# improvement <- mutate(improvement,
#                       Name = athlete)
improve_df <- rbind(improve_df, improvement)
}
improve_df <- data.frame()
# Get each athlete's improvement from last month
for (athlete in athletes) {
columns <- data %>%
select(-Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, 4:(ncol(data_current) - 3)]
athlete_last    <- data_last[data_last$Name == athlete, 4:(ncol(data_last) - 3)]
improvement <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
improvement <- mutate(improvement,
Name = athlete)
improve_df <- rbind(improve_df, improvement)
}
View(data)
source("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Monthly Report/monthly_report.R")
View(improve_df)
