}
best_df <- rbind(best_df, best[1,])
names(best_df) <- names(athlete_data)
}
count_improvements_best <- improve_best_df %>%
select(-'Nordbord % Diff', -DSI) %>%
sapply(function(x) sum(
ifelse(x %in% find_min,
ifelse(x < 0, 1, 0),
ifelse(x > 0, 1, 0))
))
source("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Monthly Report/monthly_report.R")
source("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Monthly Report/monthly_report.R")
columns <- data %>%
select(-Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, 4:(ncol(data_current) - 3)] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
athlete_last    <- data_last[data_last$Name == athlete, 4:(ncol(data_last) - 3)] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
athlete_best    <- best_df[best_df$Name == athlete, 4:(ncol(best_df) - 3)] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
improvement_last <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
improvement_last <- mutate(improvement_last,
Name = athlete)
improve_last_df <- rbind(improve_last_df, improvement_last)
improve_last_df[is.na(improve_last_df)] <- 0
improvement_best <- athlete_current - athlete_best
View(athlete_best)
source("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Monthly Report/monthly_report.R")
columns <- data %>%
select(-Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, 4:(ncol(data_current) - 3)] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
athlete_last    <- data_last[data_last$Name == athlete, 4:(ncol(data_last) - 3)] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
athlete_best    <- best_df[best_df$Name == athlete, 2:(ncol(best_df))] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
improvement_last <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
improvement_last <- mutate(improvement_last,
Name = athlete)
improve_last_df <- rbind(improve_last_df, improvement_last)
improve_last_df[is.na(improve_last_df)] <- 0
improvement_best <- athlete_current - athlete_best
source("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Monthly Report/monthly_report.R")
athlete_last    <- data_last[data_last$Name == athlete, 4:(ncol(data_last) - 3)] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
athlete_best    <- best_df[best_df$Name == athlete, 2:(ncol(best_df))] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
improvement_last <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
improvement_last <- mutate(improvement_last,
Name = athlete)
improve_last_df <- rbind(improve_last_df, improvement_last)
improve_last_df[is.na(improve_last_df)] <- 0
improvement_best <- if(nrow(athlete_current) == 0 || nrow(athlete_best) == 0){
athlete_best
} else {
athlete_current - athlete_best
}
View(athlete_best)
View(athlete_current)
improvement_last <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
athlete <- 'Delaney Newton'
athlete_current <- data_current[data_current$Name == athlete, 4:(ncol(data_current) - 3)] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
athlete_last    <- data_last[data_last$Name == athlete, 4:(ncol(data_last) - 3)] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
athlete_best    <- best_df[best_df$Name == athlete, 2:(ncol(best_df))] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
improvement_last <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
debugSource("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Monthly Report/monthly_report.R")
athlete_current - athlete_best
athlete_current - athlete_last
athlete <- 'Delaney Newton'
columns <- data %>%
select(-Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, 4:(ncol(data_current) - 3)] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
athlete_last    <- data_last[data_last$Name == athlete, 4:(ncol(data_last) - 3)] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
athlete_best    <- best_df[best_df$Name == athlete, 2:(ncol(best_df))] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
improvement_last <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
improvement_last <- mutate(improvement_last,
Name = athlete)
improve_last_df <- rbind(improve_last_df, improvement_last)
improve_last_df[is.na(improve_last_df)] <- 0
improvement_best <- if(nrow(athlete_current) == 0 || nrow(athlete_best) == 0){
athlete_best
} else {
athlete_current - athlete_best
}
athlete_best - athlete_last
athlete_best
athlete_current
athlete_current[1,] - athlete_best[1,]
athlete_current - athlete_last
athlete_best
athlete_current
summary(best_df)
View(best_df)
best_df <- best_df %>%
select(-Name) %>%
sapply(as.numeric)
best_df <- best_df %>%
select(-Name) %>%
sapply(as.data.frame(as.numeric))
best_df <- best_df %>%
select(-Name) %>%
sapply(function(x) as.numeric(x))
best_df <- data.frame()
find_min <- c('10 Yard Split', '20 Yard Sprint', '5-10-5', 'Nordbord % Diff')
# Get each athlete's best scores
for (athlete in athletes) {
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date, -Young, -Old, -Adult)
best <- if(nrow(athlete_data) == 1){
athlete_data
} else {
sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
}
best_df <- rbind(best_df, best[1,])
names(best_df) <- names(athlete_data)
}
best_df <- best_df %>%
select(-Name) %>%
sapply(function(x) as.numeric(x))
col <- 'Name'
best_df[,col]
best_df[col]
best_df[[col]
best_df[[col]]
best_df['Name']
data[col]
best_df <- data.frame()
find_min <- c('10 Yard Split', '20 Yard Sprint', '5-10-5', 'Nordbord % Diff')
# Get each athlete's best scores
for (athlete in athletes) {
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date, -Young, -Old, -Adult)
best <- if(nrow(athlete_data) == 1){
athlete_data
} else {
sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
}
best_df <- rbind(best_df, best[1,])
names(best_df) <- names(athlete_data)
}
best_df <-
for (col in names(best_df)) {
if (col != 'Name') {
best_df[col] <- as.numeric(best_df[col])
}
}
best_df[col]
best_df[col] <- as.numeric(best_df[col])
best_df <- data.frame()
find_min <- c('10 Yard Split', '20 Yard Sprint', '5-10-5', 'Nordbord % Diff')
# Get each athlete's best scores
for (athlete in athletes) {
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date, -Young, -Old, -Adult)
best <- if(nrow(athlete_data) == 1){
athlete_data
} else {
as.data.frame(sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1))))
}
best_df <- rbind(best_df, best[1,])
names(best_df) <- names(athlete_data)
}
summary(best_df)
best_df <- best_df %>%
as.data.frame(sapply(as.numeric))
summary(best_df)
best_df <- as.data.frame(sapply(best_df, as.numeric))
summary(best_df)
best_df <- data.frame()
find_min <- c('10 Yard Split', '20 Yard Sprint', '5-10-5', 'Nordbord % Diff')
# Get each athlete's best scores
for (athlete in athletes) {
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date, -Young, -Old, -Adult)
best <- if(nrow(athlete_data) == 1){
athlete_data
} else {
sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
}
best_df <- rbind(best_df, best[1,])
names(best_df) <- names(athlete_data)
}
best_df <- as.data.frame(sapply(best_df[,2:ncol(best_df)], as.numeric))
View(best_df)
best_df <- data.frame()
find_min <- c('10 Yard Split', '20 Yard Sprint', '5-10-5', 'Nordbord % Diff')
# Get each athlete's best scores
for (athlete in athletes) {
athlete_data <- data[data$Name == athlete,] %>%
select(-'Age At Testing', -Date, -Young, -Old, -Adult)
best <- if(nrow(athlete_data) == 1){
athlete_data
} else {
sapply(athlete_data,
function(x) ifelse(x %in% find_min,
min(x, na.rm = 1),
max(x, na.rm = 1)))
}
best_df <- rbind(best_df, best[1,])
names(best_df) <- names(athlete_data)
}
best_df <- cbind(best_df$Name, as.data.frame(sapply(best_df[,2:ncol(best_df)], as.numeric)))
source("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Monthly Report/monthly_report.R")
count_improvements_best
athlete <- 'Cole Freeman'
columns <- data %>%
select(-Date, -'Age At Testing') %>%
names()
athlete_current <- data_current[data_current$Name == athlete, 4:(ncol(data_current) - 3)] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
athlete_last    <- data_last[data_last$Name == athlete, 4:(ncol(data_last) - 3)] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
athlete_best    <- best_df[best_df$Name == athlete, 2:(ncol(best_df))] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
improvement_last <- if(nrow(athlete_current) == nrow(athlete_last)) {
athlete_current - athlete_last
} else if(nrow(athlete_last) == 0) {
athlete_current
} else {
athlete_last
}
improvement_last <- mutate(improvement_last,
Name = athlete)
improve_last_df <- rbind(improve_last_df, improvement_last)
improve_last_df[is.na(improve_last_df)] <- 0
improvement_best <- if(nrow(athlete_current) == 0 || nrow(athlete_best) == 0){
athlete_best
} else {
athlete_current - athlete_best
}
View(athlete_current)
athlete_best    <- best_df[best_df$Name == athlete, 2:(ncol(best_df))] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
best_df
best_df <- cbind(Name = best_df$Name, as.data.frame(sapply(best_df[,2:ncol(best_df)], as.numeric)))
athlete_best    <- best_df[best_df$Name == athlete, 2:(ncol(best_df))] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] > 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
athlete_best    <- best_df[best_df$Name == athlete, 2:(ncol(best_df))] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] >= 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
athlete_best    <- best_df[best_df$Name == athlete, 2:(ncol(best_df))] %>%
mutate(athleteCount = ifelse(count(data, Name)$n[count(data, Name)$Name == athlete] >= 1,
1, 0)) %>%
filter(athleteCount == 1) %>%
select(-athleteCount)
source("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Monthly Report/monthly_report.R")
library(reportfactory)
reportfactory::new_factory(factory = 'Monthly Testing Reports')
library(reportfactory)
new_factory(factory = 'Monthly Testing Reports', outputs = 'Reports')
shiny::runApp('Dashboard/dashboard')
test <- data.frame(Col1 = c(1:10), Col2 = c(11:20))
View(test)
test[["Col1"]]
col <- "Col1"
test[[col]]
class(test[[col]])
test$Col1 <- as.Date(test$Col1)
class(test$Col1)
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
test2 <- test[is.na(test)]
test2 <- test[is.na(test),]
runApp('Dashboard/dashboard')
test2
test2$Col1 <- "Tanner"
test2 <- test2 %>% add_row(Col1 = 2, Col2 = 7)
class(test2$Col1) <- "numeric"
test2 <- test2 %>% add_row(Col1 = 2, Col2 = 7)
?list
test2 %>% add_row(Col1 = 1)
test2$Col2 %>% add_row(Col2 = 2)
test2
col <- "Col1"
test2 %>% add_row("{col}" := 1)
test2 %>% add_row("{col}" := 1)
col <- "Col2"
test2 %>% add_row("{col}" := 1)
col <- "Col1"
test2 <- test2 %>% add_row("{col}" := 1)
col <- "Col2"
test2 <- test2 %>% add_row("{col}" := 1)
test2
View(test2)
test2 <- test[is.na(test)]
test2 <- test[is.na(test), ]
test2 %>% apply(MARGIN = 2, FUN = function(x) add_row(x))
test2 %>% apply(MARGIN = 2, FUN = function(x) add_row(test2, x))
test2 %>% apply(MARGIN = 2, FUN = x)
test2 %>% apply(MARGIN = 2, FUN = function(x) x)
counter <- 1
lapply(names(test2), function(name) {
if (counter == 1) {
test2 <- test2 %>%
add_row("{name}" = 1)
} else {
test2[nrow(test2), names(test2) == name] <- name
}
counter <- counter + 1
}
lapply(names(test2), function(name) {
if (counter == 1) {
test2 <- test2 %>%
add_row("{name}" = 1)
} else {
test2[nrow(test2), names(test2) == name] <- name
}
counter <- counter + 1
test2
}
lapply(names(test2), function(name){
test2 <- test2 %>%
add_row("{name}" = name)
})
lapply(names(test2), function(name){
test2 <- test2 %>%
add_row("{name}" := name)
})
test2
class(test2$Col1) <- character()
class(test2$Col2) <- character()
lapply(names(test2), function(name){
test2 <- test2 %>%
add_row("{name}" := name)
})
lapply(names(test2), function(name){
test2 <- test2 %>%
add_row("{name}" := as.character(name))
})
lapply(names(test2), function(name){
test2 <- test2 %>%
add_row("{name}" := 1)
})
lapply(names(test2), function(name){
test2 %>%
add_row("{name}" := 1) %>%
test2
})
tibble("{col}" = col)
tibble("{col}" := col)
tibble("{col}" := 1)
tibble()
runApp('Dashboard/dashboard')
tib <- tibble()
for (name in names(test2)) {
tib <- cbind(tib, tibble("{name}" := name))
}
tib <- tibble(x = 1)
for (name in names(test2)) {
tib <- cbind(tib, tibble("{name}" := name))
}
View(tib)
tib$x <- NULL
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
runApp('Dashboard/dashboard')
