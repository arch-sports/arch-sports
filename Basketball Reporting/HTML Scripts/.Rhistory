data_filter <- data[data$con_mean_force_assym > 0.10, ]
data_filter <- data[data$con_mean_force_assym > 0.10, ]
total <- length(data_filter$jump_height)
quad_count <- length(which(data_filter$quad == 'N'))
hip_count <- length(which(data_filter$gator == 'N'))
lat_count <- length(which(data_filter$lat == 'Y'))
calf_count <- length(which(data_filter$calf == 'Y'))
pain_count <- length(which(data_filter$pain == 'Y'))
output_filter <- data.frame(
quad = c('Quad Tightness', quad_count, round(quad_count/total*100, 1)),
hip = c('Hip Weakness', hip_count, round(hip_count/total*100, 1)),
lat = c('Lat Tightness', lat_count, round(lat_count/total*100, 1)),
calf = c('Calf Tightness', calf_count, round(calf_count/total*100, 1)),
pain = c('Pain History', pain_count, round(pain_count/total*100, 1))
)
t_output_filter <- t(output_filter)
kable(t_output_filter,
caption = 'Counts of Athletes with Con. Assym. >10%',
row.names = FALSE,
col.names = c(' ', 'Count', paste('% Total (', length(data_filter$jump_height), ')', sep = ''))
)
data_filter <- data[data$peak_assym > 0.10, ]
total <- length(data_filter$jump_height)
quad_count <- length(which(data_filter$quad == 'N'))
hip_count <- length(which(data_filter$gator == 'N'))
lat_count <- length(which(data_filter$lat == 'Y'))
calf_count <- length(which(data_filter$calf == 'Y'))
pain_count <- length(which(data_filter$pain == 'Y'))
output_filter <- data.frame(
quad = c('Quad Tightness', quad_count, round(quad_count/total*100, 1)),
hip = c('Hip Weakness', hip_count, round(hip_count/total*100, 1)),
lat = c('Lat Tightness', lat_count, round(lat_count/total*100, 1)),
calf = c('Calf Tightness', calf_count, round(calf_count/total*100, 1)),
pain = c('Pain History', pain_count, round(pain_count/total*100, 1))
)
t_output_filter <- transpose(output_filter)
kable(t_output_filter,
caption = 'Counts of Athletes with Landing Assym. >10%',
row.names = FALSE,
col.names = c(' ', 'Count', paste('% Total (', length(data_filter$jump_height), ')', sep = ''))
)
View(t_output_filter)
View(t_output_all)
View(data)
?add_header_above
x <- knitr::kable(head(mtcars), "html")
# Add a row of header with 3 columns on the top of the table. The column
# span for the 2nd and 3rd one are 5 & 6.
add_header_above(x, c(" ", "Group 1" = 5, "Group 2" = 6))
x <- knitr::kable(head(mtcars), "html")
# Add a row of header with 3 columns on the top of the table. The column
# span for the 2nd and 3rd one are 5 & 6.
add_header_above(x, c(" ", "Group 1" = 5, "Group 2" = 6))
t_output_all <- t(output_all)
kable_all <- kable(t_output_all,
caption = 'Counts of Athletes',
row.names = FALSE,
col.names = c('', 'Count', paste('% Total (', length(data$jump_height), ')', sep = '')),
format = 'html',
align = 'lcc',
valign = 't'
)
kable_ecc <- kable(t_output_filter,
caption = 'Athletes with Ecc. Assym. >10%',
row.names = FALSE,
col.names = c('', 'Count', paste('% Total (', length(data_filter$jump_height), ')', sep = '')),
format = 'html',
align = 'lcc',
valign = 't'
)
kable_con <- kable(t_output_filter,
caption = 'Athletes with Con. Assym. >10%',
row.names = FALSE,
col.names = c('', 'Count', paste('% Total (', length(data_filter$jump_height), ')', sep = '')),
format = 'html',
align = 'lcc',
valign = 't'
)
kable_land <- kable(t_output_filter,
caption = 'Athletes with Landing Assym. >10%',
row.names = FALSE,
col.names = c('', 'Count', paste('% Total (', length(data_filter$jump_height), ')', sep = '')),
format = 'html',
align = 'lcc',
valign = 't'
)
cbind(kable_ecc, kable_con, kable_land)
kable_full <- cbind(kable_ecc, kable_con, kable_land)
kable_full
x <- knitr::kable(head(mtcars), "html")
# Add a row of header with 3 columns on the top of the table. The column
# span for the 2nd and 3rd one are 5 & 6.
add_header_above(x, c(" ", "Group 1" = 5, "Group 2" = 6))
?p
library(quarto)
?[]
?p
library(data.table)
library(ggplot2)
library(ggplot2)
library(tidyverse)
library(knitr)
library(vtable)
library(dplyr)
library(vtable)
library(dplyr)
library(kableExtra)
data <- read.csv(file = '../Data/pro_skills_testing.csv') %>%
mutate(jump_height = jump_height*2.54, Team = gsub('/', '_', Team), Athlete = paste(First, Last, sep = " "))
data <- data[!is.na(data$jump_height),]
norms_cmj <- read.csv(file = '../Data/norms_basketball.csv')
ggplot(data, mapping = aes(x = jump_height)) +
geom_rect(xmin = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '25th'],
xmax = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '75th'],
ymin = 0,
ymax = Inf,
fill = 'grey',
alpha = 0.3) +
geom_density(fill = 'red', alpha = 0.5) +
geom_vline(xintercept = data$jump_height[data$Athlete == params$Athlete]) +
xlab('Countermovement Jump Height in centimeters') +
ylab(element_blank()) +
theme(axis.text.y = element_blank(),
axes.ticks.y = element_blank())
data <- read.csv(file = '../Data/pro_skills_testing.csv') %>%
mutate(jump_height = jump_height*2.54, Team = gsub('/', '_', Team), Athlete = paste(First, Last, sep = " "))
data <- data[!is.na(data$jump_height),]
norms_cmj <- read.csv(file = '../Data/norms_basketball.csv')
ggplot(data, mapping = aes(x = jump_height)) +
geom_rect(xmin = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '25th'],
xmax = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '75th'],
ymin = 0,
ymax = Inf,
fill = 'grey',
alpha = 0.3) +
geom_density(fill = 'red', alpha = 0.5) +
geom_vline(xintercept = data$jump_height[data$Athlete == params$Athlete]) +
xlab('Countermovement Jump Height in centimeters') +
ylab(element_blank()) +
theme(axis.text.y = element_blank(),
axes.ticks.y = element_blank())
ggplot(data, mapping = aes(x = rsi)) +
geom_rect(xmin = norms_cmj$"Modified.RSI..m.s."[norms_cmj$Percentile == '25th'],
xmax = norms_cmj$"Modified.RSI..m.s."[norms_cmj$Percentile == '75th'],
ymin = 0,
ymax = Inf,
fill = 'grey',
alpha = 0.3) +
geom_density(fill = 'red', alpha = 0.5) +
geom_vline(xintercept = data$rsi[data$Athlete == params$Athlete]) +
xlab('Reactive Strength Index - Modified') +
ylab(element_blank()) +
theme(axis.text.y = element_blank(),
axes.ticks.y = element_blank())
ggplot(data, mapping = aes(x = rsi)) +
geom_rect(xmin = norms_cmj$"Modified.RSI..m.s."[norms_cmj$Percentile == '25th'],
xmax = norms_cmj$"Modified.RSI..m.s."[norms_cmj$Percentile == '75th'],
ymin = 0,
ymax = Inf,
fill = 'grey',
alpha = 0.3) +
geom_density(fill = 'red', alpha = 0.5) +
geom_vline(xintercept = data$rsi[data$Athlete == params$Athlete]) +
xlab('Reactive Strength Index - Modified') +
ylab(element_blank()) +
theme(axis.text.y = element_blank(),
axes.ticks.y = element_blank())
```{r}
data[data$Athlete == params$Athlete, ] %>%
select(jump_height, rsi, ecc_mean_force_assym, con_mean_force_assym, peak_assym,  calf, lat, quad, gator, pain) %>%
kable(digits = 2,
format.args = list(scientific = FALSE),
col.names = c('CMJ', 'mRSI', 'Ecc.', 'Con.', 'Landing', 'Calf', 'Lat', 'Quad', 'Hip Weakness', 'Pain History'),
row.names = FALSE) %>%
add_header_above(
c('',
'',
'Assymetries' = 3,
'Tightness' = 3,
'',
''),
line = FALSE,
underline = FALSE,
bold = TRUE)
## Recommendations
athlete <- 'Latterio Robinson'
athlete_col <- data[data$Athlete == athlete, ] %>%
mutate(assym = (ecc_mean_force_assym >= 0.1 || con_mean_force_assym >= 0.1 || peak_assym >= 0.1), calf = (calf == 'Y'), lat = (lat == 'Y'), quad = (quad == 'Y'), gator = (gator == 'N')) %>%
select(assym, calf, lat, quad, gator) %>%
t()
recommend <- c(
first = 'Unilateral Strength Training/Plyometric Drills, including:\n
-- Lunges -- Split Squats -- Snap Downss',
calf = 'Calf Stretches, including:\n
-- Wall Ankle Dorsiflexion -- 1/2 Kneeling Calf Stretch',
lat = 'Lat Stretches, including:\n
-- Prayer Stretches -- Wall/Floor Angels',
quad = 'Quad Stretches, including:\n
-- Standing Quad Pull -- Hurdler Stretch -- Couch Stretch',
hip = 'Hip Abduction, including:\n
-- Lying Side Leg Raise -- Side Plank -- Gator Plank'
)
type <- c('High Assymetry',
'Calf Tightness',
'Lat Tightness',
'Quad Tightness',
'Hip Weakness')
output <- data.frame(
Type = type,
Result = athlete_col,
Recommend = recommend
)
output_empty <- data.frame(
Result = c('General Strength\nand Conditioning'),
Recommend = c("Follow a general strength and conditioning\nprogram under the guidance of a certified professional.")
)
colnames(output) <- c('Type', 'Results', 'Recommend')
output_final <- na.omit(output[output$Result,]) %>% select(Type, Recommend)
View(output_final)
for(row in output_final){
h4(row$Type)
div(
p(row$Recommend)
)
}
?h4
h4('hello')
p('hello')
library(quarto)
p('hello')
setwd('Basketball Reporting')
setwd('Scripts')
quarto_render('../Scripts/Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../Scripts/Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../Scripts/Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
?sprintf
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
setwd('../HTML Scripts')
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
athlete_col <- data[data$Athlete == params$Athlete, ] %>%
mutate(assym = (ecc_mean_force_assym >= 0.1 || con_mean_force_assym >= 0.1 || peak_assym >= 0.1), calf = (calf == 'Y'), lat = (lat == 'Y'), quad = (quad == 'Y'), gator = (gator == 'N')) %>%
select(assym, calf, lat, quad, gator) %>%
t()
recommend <- c(
first = 'Unilateral Strength Training/Plyometric Drills, including:\n
-- Lunges -- Split Squats -- Snap Downss',
calf = 'Calf Stretches, including:\n
-- Wall Ankle Dorsiflexion -- 1/2 Kneeling Calf Stretch',
lat = 'Lat Stretches, including:\n
-- Prayer Stretches -- Dead Hangs -- Wall/Floor Angels',
quad = 'Quad Stretches, including:\n
-- Standing Quad Pull -- Hurdler Stretch -- Couch Stretch',
hip = 'Hip Abduction, including:\n
-- Lying Side Leg Raise -- Side Plank -- Gator Plank'
)
type <- c('High Assymetry',
'Calf Tightness',
'Lat Tightness',
'Quad Tightness',
'Hip Weakness')
photo <- c('![](../Exercise Pictures/stock.png',
'![](../Exercise Pictures/stock.png',
'![](../Exercise Pictures/stock.png',
'![](../Exercise Pictures/stock.png',
'![](../Exercise Pictures/stock.png')
output <- data.frame(
Type = type,
Result = athlete_col,
Recommend = recommend,
Photo = photo
)
View(output)
output_empty <- data.frame(
Result = c('General Strength\nand Conditioning'),
Recommend = c("Follow a general strength and conditioning\nprogram under the guidance of a certified professional.")
)
colnames(output) <- c('Type', 'Results', 'Recommend', 'Photo')
output_final <- na.omit(output[output$Result,]) %>% select(Type, Recommend, Photo)
if(nrow(output_final) > 0){
kable(output_final,
col.names = c('Result', 'Recommendation'),
row.names = FALSE,
) %>%
kable_styling(bootstrap_options = c('striped', 'hover')) %>%
row_spec(row = 1:(nrow(output_final) - 1), hline_after = TRUE) %>%
column_spec(column = 2, width = '32em')
} else {
kable(output_empty,
col.names = c('Result', 'Recommendation'),
row.names = FALSE
) %>%
kable_styling(bootstrap_options = c('striped', 'hover')) %>%
column_spec(column = 1, width = '15em') %>%
column_spec(column = 2, width = '25em')
}
if(nrow(output_final) > 0){
kable(output_final,
col.names = c('Result', 'Recommendation', 'Photo'),
row.names = FALSE,
) %>%
kable_styling(bootstrap_options = c('striped', 'hover')) %>%
row_spec(row = 1:(nrow(output_final) - 1), hline_after = TRUE) %>%
column_spec(column = 2, width = '32em')
} else {
kable(output_empty,
col.names = c('Result', 'Recommendation'),
row.names = FALSE
) %>%
kable_styling(bootstrap_options = c('striped', 'hover')) %>%
column_spec(column = 1, width = '15em') %>%
column_spec(column = 2, width = '25em')
}
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
?quarto_render
'../Exercise Pictures/stock/png'
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
kable(output_final)
knitr::kable(output_final)
recommend <- c(
first = 'Unilateral Strength Training/Plyometric Drills, including:\n
-- Lunges -- Split Squats -- Snap Downss',
calf = 'Calf Stretches, including:\n
-- Wall Ankle Dorsiflexion -- 1/2 Kneeling Calf Stretch',
lat = 'Lat Stretches, including:\n
-- Prayer Stretches -- Dead Hangs -- Wall/Floor Angels',
quad = 'Quad Stretches, including:\n
-- Standing Quad Pull -- Hurdler Stretch -- Couch Stretch',
hip = 'Hip Abduction, including:\n
-- Lying Side Leg Raise -- Side Plank -- Gator Plank'
)
type <- c('High Assymetry',
'Calf Tightness',
'Lat Tightness',
'Quad Tightness',
'Hip Weakness')
photo <- c('![](../Exercise Pictures/stock.png)',
'![](../Exercise Pictures/stock.png)',
'![](../Exercise Pictures/stock.png)',
'![](../Exercise Pictures/stock.png)',
'![](../Exercise Pictures/stock.png)')
output <- data.frame(
Type = type,
Result = athlete_col,
Recommend = recommend,
Photo = photo
)
output_empty <- data.frame(
Result = c('General Strength\nand Conditioning'),
Recommend = c("Follow a general strength and conditioning\nprogram under the guidance of a certified professional.")
)
colnames(output) <- c('Type', 'Results', 'Recommend', 'Photo')
output_final <- na.omit(output[output$Result,]) %>% select(Type, Recommend, Photo)
if(nrow(output_final) > 0){
knitr::kable(output_final,
col.names = c('Result', 'Recommendation', 'Photo'),
row.names = FALSE,
) %>%
kable_styling(bootstrap_options = c('striped', 'hover')) %>%
row_spec(row = 1:(nrow(output_final) - 1), hline_after = TRUE) #%>%
#column_spec(column = 2, width = '32em')
} else {
kable(output_empty,
col.names = c('Result', 'Recommendation'),
row.names = FALSE
) %>%
kable_styling(bootstrap_options = c('striped', 'hover')) %>%
column_spec(column = 1, width = '15em') %>%
column_spec(column = 2, width = '25em')
}
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
recommend <- c(
first = 'Unilateral Strength Training/Plyometric Drills, including:\n
-- Lunges -- Split Squats -- Snap Downss',
calf = 'Calf Stretches, including:\n
-- Wall Ankle Dorsiflexion -- 1/2 Kneeling Calf Stretch',
lat = 'Lat Stretches, including:\n
-- Prayer Stretches -- Dead Hangs -- Wall/Floor Angels',
quad = 'Quad Stretches, including:\n
-- Standing Quad Pull -- Hurdler Stretch -- Couch Stretch',
hip = 'Hip Abduction, including:\n
-- Lying Side Leg Raise -- Side Plank -- Gator Plank'
)
type <- c('High Assymetry',
'Calf Tightness',
'Lat Tightness',
'Quad Tightness',
'Hip Weakness')
photo <- c('../Exercise Pictures/stock.png',
'../Exercise Pictures/stock.png',
'../Exercise Pictures/stock.png',
'../Exercise Pictures/stock.png',
'../Exercise Pictures/stock.png')
output <- data.frame(
Type = type,
Result = athlete_col,
Recommend = recommend,
Photo = ''
)
output_empty <- data.frame(
Result = c('General Strength\nand Conditioning'),
Recommend = c("Follow a general strength and conditioning\nprogram under the guidance of a certified professional.")
)
colnames(output) <- c('Type', 'Results', 'Recommend', 'Photo')
output_final <- na.omit(output[output$Result,]) %>% select(Type, Recommend, Photo)
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
?spec_image
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
for(row in output_final){
test <- append(row$Type)
}
row
for(type in output_final$Type){
test <- paste('../Exercise Pictures/', type, '.png', sep = '')
}
test
output_final$Type
for(type in output_final$Type){
test <- append(paste('../Exercise Pictures/', type, '.png', sep = ''))
}
test <- c()
for(type in output_final$Type){
test <- append(paste('../Exercise Pictures/', type, '.png', sep = ''))
}
?append
test <- c()
for(type in output_final$Type){
test <- append(test, paste('../Exercise Pictures/', type, '.png', sep = ''))
}
test
test
quarto_render('../HTML Scripts/Individual_Report.qmd',
output_format = 'html',
output_file = paste(athlete, '.html', sep = ""),
execute_params = list(Athlete = athlete))
