airQuality_plot <- ggplot(airquality, aes(x = Day, y = Ozone,
color= as.factor(Month),
text = paste("Month:", Month))) +
geom_point(size = airquality$Wind) +
ggtitle("Air Quality in New York by Day") +
labs(x = "Day of the month", y = "Ozone (ppb)", color="Month") +
scale_x_continuous(breaks = seq(1, 31, 5))+
scale_size(range = c(1, 10))
ggplotly(airQuality_plot, tooltip = c('text', 'x', 'y'))
anim_plot <- ggplot(txhousing, aes(month, median)) +
geom_line(aes(group = year), alpha = 0.3) +
geom_smooth() +
geom_line(aes(frame = year, ids = month), color = 'red') +
facet_wrap(~city)
anim_plot
ggplot(p, width = 1500, height = 900) %>%
animation_opts(1000)
ggplot(anim_plot, width = 1500, height = 900) %>%
animation_opts(1000)
anim_plot <- ggplot(txhousing, aes(month, median)) +
geom_line(aes(group = year), alpha = 0.3) +
geom_smooth() +
geom_line(aes(frame = year, ids = month), color = "red") +
facet_wrap(~ city)
ggplotly(p, width = 1500, height = 900) %>%
animation_opts(1000)
ggplotly(anim_plot, width = 1500, height = 900) %>%
animation_opts(1000)
ggplot(mpg, aes(manufacturer)) + geom_bar(aes(fill = drv)) +
ggtitle("Distribution for Cars based on Drive Type and Manufacturers") %>% ggplotly()
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
library(dplyr)
items <-
readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv'
) %>% select(-num_id,-sell_currency,-buy_currency,-games_id,-id_full) %>%
unique() %>%
head(100)
villagers <-
readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/villagers.csv'
) %>%
select(-row_n) %>%
unique()
library(dplyr)
items <-
readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv'
) %>% select(-num_id,-sell_currency,-buy_currency,-games_id,-id_full) %>%
unique() %>%
head(100)
villagers <-
readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/villagers.csv'
) %>%
select(-row_n) %>%
unique()
View(villagers)
View(items)
install.packages('DT')
library(DT)
datatable(villages[,1:8])
datatable(villagers[,1:8])
datatable(villagers,
options = list(paging = TRUE,    ## paginate the output
pageLength = 15,  ## number of rows to output for each page
scrollX = TRUE,   ## enable scrolling on X axis
scrollY = TRUE,   ## enable scrolling on Y axis
autoWidth = TRUE, ## use smart column width handling
server = FALSE,   ## use client-side processing
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
columnDefs = list(list(targets = '_all', className = 'dt-center'),
list(targets = c(0, 8, 9), visible = FALSE))
),
extensions = 'Buttons',
selection = 'single', ## enable selection of a single row
filter = 'bottom',              ## include column filters at the bottom
rownames = FALSE                ## don't show row numbers/names
)
library(shiny)
ui <- fluidPage(titlePanel("DT table in Shiny"),
mainPanel(width = 12,
DT::dataTableOutput("mytable")))
server <- function(input, output) {
output$mytable <- DT::renderDataTable(villagers,
options = list(scrollX = TRUE),
rownames = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(titlePanel("DT table in Shiny"),
mainPanel(width = 12,
DT::dataTableOutput("mytable")))
server <- function(input, output) {
output$mytable <- DT::renderDataTable(villagers,
options = list(scrollX = TRUE,),
rownames = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(titlePanel("DT table in Shiny"),
mainPanel(width = 12,
DT::dataTableOutput("mytable")))
server <- function(input, output) {
output$mytable <- DT::renderDataTable(villagers,
options = list(scrollX = TRUE),
selection = 'single',
rownames = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
icon_villagers <- villagers %>%
mutate(gender = ifelse(gender == "female",
as.character(icon("venus", lib = "font-awesome")),
as.character(icon("mars", lib = "font-awesome"))))
datatable(icon_villagers[,1:8],
options = list(scrollX = TRUE),
escape = FALSE)
install.packages('formattable')
library(formattable)
## Prepare the item data
pic_items <- items %>%
mutate(picture = ifelse(!is.na(image_url),
paste0("<img src=\"",image_url, "\" height=\"30\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"", name, "\"></img>"),
as.character(icon("question", lib = "font-awesome")))) %>%
select(picture, name, category, orderable, sell_value, buy_value) %>%
unique()
## A formatter function to format TRUE/FALSE values
true_false_formatter <-
formatter("span",
style = x ~ style(
font.weight = "bold",
color = ifelse(x == TRUE, "forestgreen", ifelse(x == FALSE, "red", "black"))
))
## Use formattable
formattable(
head(pic_items),
list(
## colour this column in a white to pink gradiant by value
`sell_value` = color_tile("white", "pink"),
## a coloured bar with length proportional to value
`buy_value` = color_bar("lightblue"),
## use custom formatter for TRUE/FALSE values
orderable = true_false_formatter
)
)
install.packages(tidymodels)
install.packages('tidymodels')
library(tidymodels)
set.seed(1234)
View(items)
data("cars")
force(cars)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_hline(yintercept = mean(cars$dist),
col = 'red')
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ poly(x, 8),
col = 'red', se = FALSE)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ x,
col = 'red',
se = FALSE)
install.packages('rlang')
library(Metrics)
install.packages('Metrics')
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(test_data)
View(test_data2)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
lm_spec <- linear_reg() %>%
set_engine(engine = 'lm')
lm_spec
View(lm_spec)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(train_results)
View(train_fit)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(test_results)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
data(cars)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_hline(yintercept = mean(cars$dist),)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_hline(yintercept = mean(cars$dist),
col = 'red')
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ poly(x, 8),
col = 'red', se = FALSE)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ poly(x, 8),
col = 'red', se = TRUE)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ x,
col = 'red', se = TRUE)
ggplotly(ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ x,
col = 'red', se = TRUE))
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
install.packages('glmnet')
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(rmse_train7)
View(results_grid)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
max(results_grid$mean)
results_grid$penalty[mean = max(mean)]
results_grid[mean = max(mean)]
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(results_grid)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/hello.R")
yn <- function(x) factor(x, 0:1, c('yes', 'no'))
View(yn)
yn(1)
posSe <- 10
yn(posSe)
yn(0)
install.packages('rmarkdown')
setwd("C:/Users/tjc52/architech_sports/arch-sports")
install.packages('palmerpenguins')
#| label: plot-penguins
#| warning: false
#| echo: false
ggplot(penguins,
aes(x = flipper_length_mm, y = bill_length_mm)) +
geom_point(aes(color = species, shape = species)) +
scale_color_manual(values = c("darkorange","purple","cyan4")) +
labs(
title = "Flipper and bill length",
subtitle = "Dimensions for penguins at Palmer Station LTER",
x = "Flipper length (mm)", y = "Bill length (mm)",
color = "Penguin species", shape = "Penguin species"
) +
theme_minimal()
library(ggplot2)
#| label: plot-penguins
#| warning: false
#| echo: false
ggplot(penguins,
aes(x = flipper_length_mm, y = bill_length_mm)) +
geom_point(aes(color = species, shape = species)) +
scale_color_manual(values = c("darkorange","purple","cyan4")) +
labs(
title = "Flipper and bill length",
subtitle = "Dimensions for penguins at Palmer Station LTER",
x = "Flipper length (mm)", y = "Bill length (mm)",
color = "Penguin species", shape = "Penguin species"
) +
theme_minimal()
#| label: load-packages
#| include: false
library(tidyverse)
library(palmerpenguins)
library(ggplot2)
#| label: plot-penguins
#| warning: false
#| echo: false
ggplot(penguins,
aes(x = flipper_length_mm, y = bill_length_mm)) +
geom_point(aes(color = species, shape = species)) +
scale_color_manual(values = c("darkorange","purple","cyan4")) +
labs(
title = "Flipper and bill length",
subtitle = "Dimensions for penguins at Palmer Station LTER",
x = "Flipper length (mm)", y = "Bill length (mm)",
color = "Penguin species", shape = "Penguin species"
) +
theme_minimal()
'a' %in% 'alpha'
grep('a', 'alpha')
grep('.a', 'alpha')
grep('.p', 'alpha')
library(googlesheets4)
data <- read_sheet("https://docs.google.com/spreadsheets/d/1fSiNRPszTVVdbjdtHBI6mn0NtjD10cy_CzOjx_jWCBc/edit#gid=0")
View(data)
clean_data <- data[!is.na(data$`Jump Height`)]
clean_data <- data[!is.na(data$`Jump Height`),]
View(clean_data)
View(clean_data)
write.csv(data, 'pro_skills_testing.csv', row.names = FALSE)
library(ggplot2)
ggplot(clean_data, mapping = aes('Gator Plank')) + geom_bar() + coord_polar()
ggplot(clean_data, mapping = aes(y = 'Gator Plank', fill = group)) + geom_bar() + coord_polar()
ggplot(clean_data, mapping = aes(y = 'Gator Plank')) + geom_bar() + coord_polar()
ggplot(clean_data, mapping = aes(y = 'Gator Plank')) + geom_bar()
ggplot(clean_data, mapping = aes(x = 'Gator Plank')) + geom_bar()
ggplot(clean_data, mapping = aes(x = 'Gator Plank')) + geom_histogram()
ggplot(clean_data, mapping = aes(x = clean_data$`Gator Plank`)) + geom_histogram()
ggplot(clean_data, mapping = aes(x = `Gator Plank`)) + geom_histogram()
ggplot(clean_data, mapping = aes(x = `Gator Plank`)) + geom_histogram(stat = 'count')
ggplot(clean_data, mapping = aes(x = `Gator Plank`)) + geom_histogram(stat = 'count', color = 'black', fill = 'red')
data <- read_sheet("https://docs.google.com/spreadsheets/d/1fSiNRPszTVVdbjdtHBI6mn0NtjD10cy_CzOjx_jWCBc/edit#gid=0")
clean_data <- data[!is.na(data$`Jump Height`),]
clean_data <- data[!is.na(data$height),]
clean_data <- data[!is.na(data$jump_height),]
write.csv(data, file = 'pro_skills_testing.csv', row.names = FALSE)
data <- read_sheet("https://docs.google.com/spreadsheets/d/1fSiNRPszTVVdbjdtHBI6mn0NtjD10cy_CzOjx_jWCBc/edit#gid=0")
clean_data <- data[!is.na(data$jump_height),]
write.csv(data, file = 'pro_skills_testing.csv', row.names = FALSE)
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
library(quarto)
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
setwd('Basketball Reporting')
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
data[data$Last == 'Kincaid',]
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste('test.pdf', sep = ""),
execute_params = list(Athlete = 'Braven Kincaid', Team = 'CLT 2027 Elite Leaphart'))
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/Make Reports.R")
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/Make Reports.R")
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/Make Reports.R")
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/Make Reports.R")
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/Make Reports.R")
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/Make Reports.R")
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/Make Reports.R")
View(clean_data)
library(corrplot)
corrplot(clean_data, method = 'color', type = 'upper')
View(clean_data)
select(clean_data, -c(Last, First, Team))
select(clean_data, -c(Last, First, Team)) %>% corrplot(method = 'color', type = 'upper')
cor(data$gator, method = 'pearson')
cor(data, method = 'pearson')
model <- lm(rsi ~ gator, data = clean_data)
summary(model)
aov(model)
model <- aov(rsi ~ gator, data = clean_data)
summary(model)
model <- aov(rsi ~ calf, data = clean_data)
summary(model)\
summary(model)
corr_data <- select(clean_data, c(jump_height, rsi, ecc_mean_force_assym_side, con_mean_force_assym, con_mean_force_assym_side, peak_assym, peak_assym_side, pain, gator, calf, lat, quad))
corr_data <- select(clean_data, c(jump_height, rsi, ecc_mean_assym_side, con_mean_force_assym, con_mean_assym_side, peak_assym, peak_assym_side, pain, gator, calf, lat, quad))
corr_data <- select(clean_data, c(jump_height, rsi, ecc_mean_assym_side, con_mean_force_assym, con_mean_force_assym_side, peak_assym, peak_assym_side, pain, gator, calf, lat, quad))
corr_data <- mutate(pain = ifelse(pain = 'Y', 1, 0), gator = ifelse(gator = 'Y', 1, 0), calf = ifelse(calf = 'Y', 1, 0), lat = ifelse(lat = 'Y', 1, 0), quad = ifelse(quad = 'Y', 1, 0))
corr_data <- mutate(pain = ifelse(pain == 'Y', 1, 0), gator = ifelse(gator == 'Y', 1, 0), calf = ifelse(calf == 'Y', 1, 0), lat = ifelse(lat == 'Y', 1, 0), quad = ifelse(quad == 'Y', 1, 0))
corr_data <- mutate(corr_data, pain = ifelse(pain == 'Y', 1, 0), gator = ifelse(gator == 'Y', 1, 0), calf = ifelse(calf == 'Y', 1, 0), lat = ifelse(lat == 'Y', 1, 0), quad = ifelse(quad == 'Y', 1, 0))
View(corr_data)
corrplot(corr_data, method = 'color', type = 'upper')
corr_data <- select(clean_data, c(jump_height, rsi, con_mean_force_assym, peak_assym, pain, gator, calf, lat, quad))
corr_data <- mutate(corr_data, pain = ifelse(pain == 'Y', 1, 0), gator = ifelse(gator == 'Y', 1, 0), calf = ifelse(calf == 'Y', 1, 0), lat = ifelse(lat == 'Y', 1, 0), quad = ifelse(quad == 'Y', 1, 0))
corrplot(corr_data, method = 'color', type = 'upper')
corrplot(corr_data, is.corr = FALSE, method = 'color', type = 'upper')
corrplot(corr_data, is.corr = FALSE, method = 'square', type = 'upper')
corrplot(corr_data, is.corr = FALSE, type = 'upper')
corr_matrix <- cor(corr_data, use = 'pairwise.complete.obs', method = 'pearson')
corrplot(corr_matrix, method = 'color', type = 'upper')
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/correlation.R")
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/correlation.R")
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/correlation.R")
data <- read.csv(file = './Data/pro_skills_testing.csv')
clean_data <- data[~is.na(data$jump_height), ]
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/correlation.R")
View(corr_data)
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/correlation.R")
View(corr_data)
corr_data <- select(clean_data, -c(First, Last, Team, ecc_mean_assym_side, con_mean_force_assym_side, peak_assym_side, pain, event)) %>%
mutate(corr_data, pain = ifelse(pain == 'Y', 1, 0), gator = ifelse(gator == 'Y', 1, 0), calf = ifelse(calf == 'Y', 1, 0), lat = ifelse(lat == 'Y', 1, 0), quad = ifelse(quad == 'Y', 1, 0))
data <- read.csv(file = './Data/pro_skills_testing.csv')
clean_data <- data[!is.na(data$jump_height), ]
corr_data <- select(clean_data, -c(First, Last, Team, ecc_mean_assym_side, con_mean_force_assym_side, peak_assym_side, pain, event)) %>%
mutate(corr_data, pain = ifelse(pain == 'Y', 1, 0), gator = ifelse(gator == 'Y', 1, 0), calf = ifelse(calf == 'Y', 1, 0), lat = ifelse(lat == 'Y', 1, 0), quad = ifelse(quad == 'Y', 1, 0))
View(corr_data)
library(tidyverse)
library(corrplot)
data <- read.csv(file = './Data/pro_skills_testing.csv')
clean_data <- data[!is.na(data$jump_height), ]
corr_data <- select(clean_data, -c(First, Last, Team, ecc_mean_assym_side, con_mean_force_assym_side, peak_assym_side, pain, event)) %>%
mutate(corr_data, pain = ifelse(pain == 'Y', 1, 0), gator = ifelse(gator == 'Y', 1, 0), calf = ifelse(calf == 'Y', 1, 0), lat = ifelse(lat == 'Y', 1, 0), quad = ifelse(quad == 'Y', 1, 0))
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/correlation.R")
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/correlation.R")
library(tidyverse)
library(corrplot)
data <- read.csv(file = './Data/pro_skills_testing.csv')
clean_data <- data[!is.na(data$jump_height), ]
corr_data <- select(clean_data, -c(First, Last, Team, ecc_mean_assym_side, con_mean_force_assym_side, peak_assym_side, event)) %>%
mutate(pain = ifelse(pain == 'Y', 1, 0), gator = ifelse(gator == 'Y', 1, 0), calf = ifelse(calf == 'Y', 1, 0), lat = ifelse(lat == 'Y', 1, 0), quad = ifelse(quad == 'Y', 1, 0))
corr_matrix <- cor(corr_data, use = 'pairwise.complete.obs', method = 'pearson')
print(corrplot(corr_matrix, method = c('ellipse', 'number'), type = 'upper'))
source("C:/Users/tjc52/architech_sports/arch-sports/Basketball Reporting/correlation.R")
