colnames(output) <- c('Type', "Results", 'Recommend')
output_final <- output[output$Results,]
View(output_final)
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
```{r}
athlete_col <- data[data$Athlete == params$Athlete, ] %>%
mutate(assym = (ecc_mean_force_assym >= 0.1 || con_mean_force_assym >= 0.1 || peak_assym >= 0.1), calf = (calf == 'Y'), lat = (lat == 'Y'), quad = (quad == 'Y'), gator = (gator == 'N')) %>%
select(assym, calf, lat, quad, gator) %>%
t()
recommend <- c(
assym = 'Unliateral strength training, including:\n-Lunges\n-Split Squats\n-Pistol Squats
\nTechnical Plyometric Drills, including:\n-Snap Downs\n-SL Hop and Stick\n-SL Snap Down',
calf = 'Calf Stretches, including:\n-Wall Ankle Dorsiflexion\n-1/2 Kneeling Calf Stretch',
lat = 'Lat Stretches, including:\n-Prayer Stretch\n-Dead Hangs\n-Wall/Floor Angels',
quad = 'Quad Stretches, including:\n-Standing Quad Pull\n-Hurdler Stretch\n-Couch Stretch',
hip = 'Hip Adduction/Abuction, including:\n-Lying Side Leg Raise\n-Side Plank\n-Gator Plank\n-Copenhagen Plank'
)
output <- data.frame(
Type = c('High Assymetry', 'Calf Tightness', 'Lat Tightness', 'Quad Tightness', 'Hip Weakness'),
Results = athlete_col,
Recommend = recommend
)
colnames(output) <- c('Type', 'Results', 'Recommend')
View(output)
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
#setwd(getSrcDirectory(function(){}))
```
# Test Results
```{r}
#| label: fig-cmj
#| layout-ncol: 2
library(data.table)
library(ggplot2)
library(tidyverse)
library(knitr)
library(vtable)
library(dplyr)
library(kableExtra)
data <- read.csv(file = './Data/pro_skills_testing.csv') %>%
mutate(jump_height = jump_height*2.54, Team = gsub('/', '_', Team), Athlete = paste(First, Last, sep = " "))
data <- data[!is.na(data$jump_height),]
norms_cmj <- read.csv(file = './Data/norms_basketball.csv')
ggplot(data, mapping = aes(x = jump_height)) +
geom_rect(xmin = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '25th'],
xmax = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '75th'],
ymin = 0,
ymax = Inf,
fill = 'grey',
alpha = 0.3) +
geom_density(fill = 'red', alpha = 0.5) +
geom_vline(xintercept = data$jump_height[data$Athlete == params$Athlete]) +
xlab('Countermovement Jump Height in centimeters') +
ylab(element_blank()) +
theme(axis.text.y = element_blank(),
axes.ticks.y = element_blank())
ggplot(data, mapping = aes(x = jump_height)) +
geom_rect(xmin = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '25th'],
xmax = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '75th'],
ymin = 0,
ymax = Inf,
fill = 'grey',
alpha = 0.3) +
geom_density(fill = 'red', alpha = 0.5) +
geom_vline(xintercept = data$jump_height[data$Athlete == params$Athlete]) +
xlab('Countermovement Jump Height in centimeters') +
ylab(element_blank()) +
theme(axis.text.y = element_blank(),
axes.ticks.y = element_blank())
ggplot(data, mapping = aes(x = rsi)) +
geom_rect(xmin = norms_cmj$"Modified.RSI..m.s."[norms_cmj$Percentile == '25th'],
xmax = norms_cmj$"Modified.RSI..m.s."[norms_cmj$Percentile == '75th'],
ymin = 0,
ymax = Inf,
fill = 'grey',
alpha = 0.3) +
geom_density(fill = 'red', alpha = 0.5) +
geom_vline(xintercept = data$rsi[data$Athlete == params$Athlete]) +
xlab('Reactive Strength Index - Modified') +
ylab(element_blank()) +
theme(axis.text.y = element_blank(),
axes.ticks.y = element_blank())
```{r}
athlete_col <- data[data$Athlete == params$Athlete, ] %>%
mutate(assym = (ecc_mean_force_assym >= 0.1 || con_mean_force_assym >= 0.1 || peak_assym >= 0.1), calf = (calf == 'Y'), lat = (lat == 'Y'), quad = (quad == 'Y'), gator = (gator == 'N')) %>%
select(assym, calf, lat, quad, gator) %>%
t()
recommend <- c(
assym = 'Unliateral strength training, including:\n-Lunges\n-Split Squats\n-Pistol Squats
\nTechnical Plyometric Drills, including:\n-Snap Downs\n-SL Hop and Stick\n-SL Snap Down',
calf = 'Calf Stretches, including:\n-Wall Ankle Dorsiflexion\n-1/2 Kneeling Calf Stretch',
lat = 'Lat Stretches, including:\n-Prayer Stretch\n-Dead Hangs\n-Wall/Floor Angels',
quad = 'Quad Stretches, including:\n-Standing Quad Pull\n-Hurdler Stretch\n-Couch Stretch',
hip = 'Hip Adduction/Abuction, including:\n-Lying Side Leg Raise\n-Side Plank\n-Gator Plank\n-Copenhagen Plank'
)
output <- data.frame(
Type = c('High Assymetry', 'Calf Tightness', 'Lat Tightness', 'Quad Tightness', 'Hip Weakness'),
Results = athlete_col,
Recommend = recommend
)
colnames(output) <- c('Type', 'Results', 'Recommend')
output_final <- output[output$Results,]
kable(
output_final,
col.names = c('', 'Test Results', 'Recommendation'),
align = 'lll'
)
athlete_col <- data[data$Athlete == params$Athlete, ] %>%
mutate(assym = (ecc_mean_force_assym >= 0.1 || con_mean_force_assym >= 0.1 || peak_assym >= 0.1), calf = (calf == 'Y'), lat = (lat == 'Y'), quad = (quad == 'Y'), gator = (gator == 'N')) %>%
select(assym, calf, lat, quad, gator) %>%
t()
athlete_col <- data[data$Athlete == athlete, ] %>%
mutate(assym = (ecc_mean_force_assym >= 0.1 || con_mean_force_assym >= 0.1 || peak_assym >= 0.1), calf = (calf == 'Y'), lat = (lat == 'Y'), quad = (quad == 'Y'), gator = (gator == 'N')) %>%
select(assym, calf, lat, quad, gator) %>%
t()
recommend <- c(
assym = 'Unliateral strength training, including:\n-Lunges\n-Split Squats\n-Pistol Squats
\nTechnical Plyometric Drills, including:\n-Snap Downs\n-SL Hop and Stick\n-SL Snap Down',
calf = 'Calf Stretches, including:\n-Wall Ankle Dorsiflexion\n-1/2 Kneeling Calf Stretch',
lat = 'Lat Stretches, including:\n-Prayer Stretch\n-Dead Hangs\n-Wall/Floor Angels',
quad = 'Quad Stretches, including:\n-Standing Quad Pull\n-Hurdler Stretch\n-Couch Stretch',
hip = 'Hip Adduction/Abuction, including:\n-Lying Side Leg Raise\n-Side Plank\n-Gator Plank\n-Copenhagen Plank'
)
output <- data.frame(
Type = c('High Assymetry', 'Calf Tightness', 'Lat Tightness', 'Quad Tightness', 'Hip Weakness'),
Results = athlete_col,
Recommend = recommend
)
colnames(output) <- c('Type', 'Results', 'Recommend')
output_final <- output[output$Results,]
View(output_final)
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
output_final <- output[output$Results,] %>% select(output$Type, output$Recommend)
output_final <- output[output$Results,] %>% select(Type, Recommend)
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
kable(output_final)
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
kable(
output_final,
col.names = c('Results', 'Recommendation'),
row.names = FALSE
)
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
'Unliateral strength training, including:\n
\t-Lunges\n\t
\t-Split Squats\n\t
\t-Pistol Squat\n\t
Technical Plyometric Drills, including:\n
\t-Snap Downs\n\t
\t-SL Hop and Stick\n\t
\t-SL Snap Down\n\t'
cat('Unliateral strength training, including:\n
\t-Lunges\n\t
\t-Split Squats\n\t
\t-Pistol Squat\n\t
Technical Plyometric Drills, including:\n
\t-Snap Downs\n\t
\t-SL Hop and Stick\n\t
\t-SL Snap Down\n\t')
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
recommend <- c(
assym = cat('Unliateral strength training, including:\n
\t-Lunges\n\t
\t-Split Squats\n\t
\t-Pistol Squat\n\t
Technical Plyometric Drills, including:\n
\t-Snap Downs\n\t
\t-SL Hop and Stick\n\t
\t-SL Snap Down\n\t'),
calf = cat('Calf Stretches, including:\n
\t-Wall Ankle Dorsiflexion\n
\t-1/2 Kneeling Calf Stretch'),
lat = cat('Lat Stretches, including:\n
\t-Prayer Stretch\n
\t-Dead Hangs\n
\t-Wall/Floor Angels'),
quad = cat('Quad Stretches, including:\n
\t-Standing Quad Pull\n
\t-Hurdler Stretch\n
\t-Couch Stretch'),
hip = cat('Hip Adduction/Abuction, including:\n
\t-Lying Side Leg Raise\n
\t-Side Plank\n
\t-Gator Plank\n
\t-Copenhagen Plank')
)
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
text <- paste('Unliateral strength training, including:',
'\t-Lunges',
'\t-Split Squats',
'\t-Pistol Squat',
'Technical Plyometric Drills, including:',
'\t  -Snap Downs',
'\t  -SL Hop and Stick',
'\t  -SL Snap Down', sep = '\n')
text
cat(text)
text <- cat(text)
text
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
athlete_col <- data[data$Athlete == params$Athlete, ] %>%
mutate(assym = (ecc_mean_force_assym >= 0.1 || con_mean_force_assym >= 0.1 || peak_assym >= 0.1), calf = (calf == 'Y'), lat = (lat == 'Y'), quad = (quad == 'Y'), gator = (gator == 'N')) %>%
select(assym, calf, lat, quad, gator) %>%
t()
recommend <- c(
assym = 'Unliateral strength training, including:\n
\t-Lunges\n\t
\t-Split Squats\n\t
Technical Plyometric Drills, including:\n
\t-Snap Downs\n\t
\t-SL Hop and Stick\n\t',
calf = 'Calf Stretches, including:\n
\t-Wall Ankle Dorsiflexion\n
\t-1/2 Kneeling Calf Stretch',
lat = 'Lat Stretches, including:\n
\t-Prayer Stretch\n
\t-Dead Hangs\n
\t-Wall/Floor Angels',
quad = 'Quad Stretches, including:\n
\t-Standing Quad Pull\n
\t-Hurdler Stretch\n
\t-Couch Stretch',
hip = 'Hip Adduction/Abuction, including:\n
\t-Lying Side Leg Raise\n
\t-Side Plank\n
\t-Gator Plank\n
\t-Copenhagen Plank'
)
output <- data.frame(
Type = c('High Assymetry', 'Calf Tightness', 'Lat Tightness', 'Quad Tightness', 'Hip Weakness'),
Results = athlete_col,
Recommend = recommend
)
colnames(output) <- c('Type', 'Results', 'Recommend')
---
title: \Huge `r params$Athlete`
![](./Logos/Architech+Sports+Logo.png){fig-align="center" width="514"} ![](./Logos/pro_skills.jpg){fig-align="center"} {{< pagebreak >}}
```{r}
#setwd(getSrcDirectory(function(){}))
```
# Test Results
```{r}
#| label: fig-cmj
#| layout-ncol: 2
library(data.table)
library(ggplot2)
library(tidyverse)
library(knitr)
library(vtable)
library(dplyr)
data <- data[!is.na(data$jump_height),]
data <- data[!is.na(data$jump_height),]
norms_cmj <- read.csv(file = './Data/norms_basketball.csv')
norms_cmj <- read.csv(file = './Data/norms_basketball.csv')
ggplot(data, mapping = aes(x = jump_height)) +
geom_rect(xmin = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '25th'],
xmax = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '75th'],
ymin = 0,
ymax = Inf,
fill = 'grey',
alpha = 0.3) +
geom_density(fill = 'red', alpha = 0.5) +
geom_vline(xintercept = data$jump_height[data$Athlete == params$Athlete]) +
xlab('Countermovement Jump Height in centimeters') +
ylab(element_blank()) +
theme(axis.text.y = element_blank(),
axes.ticks.y = element_blank())
norms_cmj <- read.csv(file = './Data/norms_basketball.csv')
ggplot(data, mapping = aes(x = jump_height)) +
geom_rect(xmin = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '25th'],
xmax = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '75th'],
ymin = 0,
ymax = Inf,
fill = 'grey',
alpha = 0.3) +
geom_density(fill = 'red', alpha = 0.5) +
geom_vline(xintercept = data$jump_height[data$Athlete == params$Athlete]) +
xlab('Countermovement Jump Height in centimeters') +
ylab(element_blank()) +
theme(axis.text.y = element_blank(),
axes.ticks.y = element_blank())
ggplot(data, mapping = aes(x = rsi)) +
geom_rect(xmin = norms_cmj$"Modified.RSI..m.s."[norms_cmj$Percentile == '25th'],
xmax = norms_cmj$"Modified.RSI..m.s."[norms_cmj$Percentile == '75th'],
ymin = 0,
ymax = Inf,
fill = 'grey',
alpha = 0.3) +
geom_density(fill = 'red', alpha = 0.5) +
geom_vline(xintercept = data$rsi[data$Athlete == params$Athlete]) +
xlab('Reactive Strength Index - Modified') +
ylab(element_blank()) +
theme(axis.text.y = element_blank(),
axes.ticks.y = element_blank())
```{r}
ggplot(data, mapping = aes(x = rsi)) +
geom_rect(xmin = norms_cmj$"Modified.RSI..m.s."[norms_cmj$Percentile == '25th'],
xmax = norms_cmj$"Modified.RSI..m.s."[norms_cmj$Percentile == '75th'],
ymin = 0,
ymax = Inf,
fill = 'grey',
alpha = 0.3) +
geom_density(fill = 'red', alpha = 0.5) +
geom_vline(xintercept = data$rsi[data$Athlete == params$Athlete]) +
xlab('Reactive Strength Index - Modified') +
ylab(element_blank()) +
theme(axis.text.y = element_blank(),
axes.ticks.y = element_blank())
```
```{r}
data[data$Athlete == params$Athlete, ] %>%
select(jump_height, rsi, ecc_mean_force_assym, con_mean_force_assym, peak_assym,  calf, lat, quad, gator, pain) %>%
kable(caption = 'Raw data from testing.',
digits = 2,
format.args = list(scientific = FALSE),
col.names = c('CMJ', 'mRSI', 'Ecc.', 'Con.', 'Landing', 'Calf', 'Lat', 'Quad', 'Hip Weakness', 'Pain History'),
row.names = FALSE) %>%
add_header_above(
c('',
'',
'Assymetries' = 3,
'Tightness' = 3,
'',
''),
line = FALSE,
underline = FALSE,
bold = TRUE)
data[data$Athlete == params$Athlete, ] %>%
select(jump_height, rsi, ecc_mean_force_assym, con_mean_force_assym, peak_assym,  calf, lat, quad, gator, pain) %>%
kable(caption = 'Raw data from testing.',
digits = 2,
format.args = list(scientific = FALSE),
col.names = c('CMJ', 'mRSI', 'Ecc.', 'Con.', 'Landing', 'Calf', 'Lat', 'Quad', 'Hip Weakness', 'Pain History'),
row.names = FALSE) %>%
add_header_above(
c('',
'',
'Assymetries' = 3,
'Tightness' = 3,
'',
''),
line = FALSE,
underline = FALSE,
bold = TRUE)
```{r}
athlete_col <- data[data$Athlete == params$Athlete, ] %>%
mutate(assym = (ecc_mean_force_assym >= 0.1 || con_mean_force_assym >= 0.1 || peak_assym >= 0.1), calf = (calf == 'Y'), lat = (lat == 'Y'), quad = (quad == 'Y'), gator = (gator == 'N')) %>%
select(assym, calf, lat, quad, gator) %>%
t()
recommend <- c(
assym = 'Unliateral strength training, including:\n
\t-Lunges\n\t
\t-Split Squats\n\t
Technical Plyometric Drills, including:\n
\t-Snap Downs\n\t
\t-SL Hop and Stick\n\t',
calf = 'Calf Stretches, including:\n
\t-Wall Ankle Dorsiflexion\n
\t-1/2 Kneeling Calf Stretch',
lat = 'Lat Stretches, including:\n
\t-Prayer Stretch\n
\t-Dead Hangs\n
\t-Wall/Floor Angels',
quad = 'Quad Stretches, including:\n
\t-Standing Quad Pull\n
\t-Hurdler Stretch\n
\t-Couch Stretch',
hip = 'Hip Adduction/Abuction, including:\n
\t-Lying Side Leg Raise\n
\t-Side Plank\n
\t-Gator Plank\n
\t-Copenhagen Plank'
)
output <- data.frame(
Type = c('High Assymetry', 'Calf Tightness', 'Lat Tightness', 'Quad Tightness', 'Hip Weakness'),
Results = athlete_col,
Recommend = recommend
)
colnames(output) <- c('Type', 'Results', 'Recommend')
output_final <- output[output$Results,] %>% select(Type, Recommend)
kable(
output_final,
col.names = c('Results', 'Recommendation'),
row.names = FALSE
) %>%
column_spec(column = 2, width = '31em')
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
quarto_render('Individual_Report.qmd',
output_format = 'pdf',
output_file = paste(athlete, '.pdf', sep = ""),
execute_params = list(Athlete = athlete))
