|    The Functional Movement Screen™ is a battery of several assessments that look to determine the quality of an athlete's movement patterns. While performing the entire FMS™ screen gives a more comprehensive look into an athlete's movement, the overhead squat, as a single assessment, provides a holistic look into the entire body as an entire system working together. The squat looks at an athlete's ability to reach good depth while maintaining a relatively upright posture, shoulder flexion in keeping the bar overhead, and weight balanced both between the left and right feet and over the middle of the foot. This allows the practitioner to assess the athlete's movement capabilities across the whole body at once. During this assessment, we looked at whether tightness in the calves and/or lats were the limiting factor. A 'Yes' indicates tightness in that particular area.
</p>
{{< pagebreak >}}
# Counts of Athletes
```{r warning=FALSE}
# Raw Data
```{r}
#| output: asis
#| output: asis
#sumtable(select(data, Athlete, jump_height, rsi, gator, calf, lat, -Team), simple.kable = TRUE)
data %>%
select(-Team, -Last, -First, -event) %>%
relocate(Athlete) %>%
arrange(by = Athlete) %>%
kable(caption = 'Raw data from testing.',
digits = 2,
format.args = list(scientific = FALSE),
col.names = c('Athlete',
'Jump Height',
'mRSI',
'Mean Force Asymm.', 'Asymm Side',
'Mean Force Asymm.', 'Asymm Side',
'Mean Force Asymm.', 'Asymm Side',
'Pain',
'Hip Weakness',
'Calf',
'Lat',
'Quad'),
row.names = FALSE) %>%
kable_styling(bootstrap_options = 'striped') %>%
add_header_above(
c('',
'CMJ'        = 2,
'Eccentric'  = 2,
'Concectric' = 2,
'Landing'    = 2,
'',
'',
'Tightness'  = 3)
)
data <- data %>%
mutate(
high_con  = ifelse(con_mean_force_assym >= 0.1, 'Y', 'N'),
high_ecc  = ifelse(ecc_mean_force_assym >= 0.1, 'Y', 'N'),
high_land = ifelse(peak_assym >= 0.1, 'Y', 'N')
)
data <- read.csv(file = '../Data/pro_skills_testing.csv') %>%
mutate(jump_height = jump_height*2.54, Team = gsub('/', '_', Team), Athlete = paste(First, Last, sep = " "))
data <- data[!is.na(data$jump_height),]
norms_cmj <- read.csv(file = '../Data/norms_basketball.csv')
data <- data %>%
mutate(
high_con  = ifelse(con_mean_force_assym >= 0.1, 'Y', 'N'),
high_ecc  = ifelse(ecc_mean_force_assym >= 0.1, 'Y', 'N'),
high_land = ifelse(peak_assym >= 0.1, 'Y', 'N')
)
# Abstract
|    The purpose of this testing was to determine the possible relationship between a history of pain/injury, tightness in various areas of the body, and countermovement jump (CMJ) force asymmetries in male high school basketball players. The test was performed in three sections. First, the athletes would perform 3 repetitions of the CMJ using force plates. Second, the athletes performed a Functional Movement Screen (FMS) Overhead Squat to assess tightness in the lats and calves. Third, the athletes performed a gator side plank on each side to assess hip strength and were assessed for quad tightness using the Ely's Test. The pain and injury history information was gathered by survey. After the test, the results were grouped by whether the athletes displayed high asymmetries in the jump metrics (>= 10%), whether they had pain, and whether they were able to successfully complete the movement assessments with or without tightness. The results were analyzed using the Fisher's Exact Test. Based on the resulting p-values from the pairwise comparisons using the Fisher's Exact Test, no groupings of results showed a statistically significant correlation.
# Contigency Table
```{r warning=FALSE}
#| label: table-count
#| tbl-cap-location: bottom
#| tbl-cap:
#| - 'Contigency Table'
#| - "p-values from Fisher's Exact Test. Values <0.05 are significant."
#| layout-ncol: 1
#| layout-nrow: 4
library(data.table)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(knitr)
library(vtable)
library(dplyr)
library(kableExtra)
library(corrplot)
data <- read.csv(file = '../Data/pro_skills_testing.csv') %>%
mutate(jump_height = jump_height*2.54, Team = gsub('/', '_', Team), Athlete = paste(First, Last, sep = " "))
data <- data[!is.na(data$jump_height),]
norms_cmj <- read.csv(file = '../Data/norms_basketball.csv')
data <- data %>%
mutate(
high_con  = ifelse(con_mean_force_assym >= 0.1, 'Y', 'N'),
high_ecc  = ifelse(ecc_mean_force_assym >= 0.1, 'Y', 'N'),
high_land = ifelse(peak_assym >= 0.1, 'Y', 'N')
)
tests <- c('pain', 'gator', 'lat', 'calf', 'quad', 'high_con', 'high_ecc', 'high_land')
output         <- table(c(1:18))
output_stat    <- table(c(1:9))
for (test1 in tests) {
temp         <- table(c('Y', 'N'), c('Y', 'N'))
temp_stat    <- table(1)
for (test2 in tests) {
test_table <- table(data[[test1]], data[[test2]],
dnn = c(test1, test2))
ctable     <- prop.table(test_table)
temp       <- cbind(temp,
ctable * 100)
p_val      <- fisher.test(test_table)$p.value
temp_stat  <- cbind(temp_stat,
p_val)
}
output       <- rbind(output, temp)
output_stat  <- rbind(output_stat, temp_stat)
}
output_stat    <- output_stat[2:nrow(output_stat), 2:ncol(output_stat)]
output %>%
kable(
col.names = c('Pain',
'N', 'Y',
'N', 'Y',
'N', 'Y',
'N', 'Y',
'N', 'Y',
'Low', 'High',
'Low', 'High',
'Low', 'High'),
align = 'c',
digits = 2
) %>%
kable_styling(
bootstrap_options = c('striped', 'hover')
) %>%
add_header_above(
c('',
'Pain' = 2,
'Hip'  = 2,
'Lat'  = 2,
'Calf' = 2,
'Quad' = 2,
'Con. Asymm' = 2,
'Ecc. Asymm' = 2,
'Land. Asymm' = 2
)
) %>%
column_spec(1, bold = TRUE) %>%
column_spec(c(3, 5, 7, 9, 11, 13, 15), border_right = TRUE) %>%
pack_rows(group_label = 'Hip Weakness', 3, 4) %>%
pack_rows(group_label = 'Lat Tightness', 5, 6) %>%
pack_rows(group_label = 'Calf Tightness', 7, 8) %>%
pack_rows(group_label = 'Quad Tightness', 9, 10) %>%
pack_rows(group_label = 'Con. Asymmetry', 11, 12) %>%
pack_rows(group_label = 'Ecc. Asymmetry', 13, 14) %>%
pack_rows(group_label = 'Landing Asymmetry', 15, 16)
View(output)
output         <- output[2:nrow(output), 3:ncol(output)]
output_stat    <- output_stat[2:nrow(output_stat), 2:ncol(output_stat)]
output %>%
kable(
col.names = c('Pain',
'N', 'Y',
'N', 'Y',
'N', 'Y',
'N', 'Y',
'N', 'Y',
'Low', 'High',
'Low', 'High',
'Low', 'High'),
align = 'c',
digits = 2
) %>%
kable_styling(
bootstrap_options = c('striped', 'hover')
) %>%
add_header_above(
c('',
'Pain' = 2,
'Hip'  = 2,
'Lat'  = 2,
'Calf' = 2,
'Quad' = 2,
'Con. Asymm' = 2,
'Ecc. Asymm' = 2,
'Land. Asymm' = 2
)
) %>%
column_spec(1, bold = TRUE) %>%
column_spec(c(3, 5, 7, 9, 11, 13, 15), border_right = TRUE) %>%
pack_rows(group_label = 'Hip Weakness', 3, 4) %>%
pack_rows(group_label = 'Lat Tightness', 5, 6) %>%
pack_rows(group_label = 'Calf Tightness', 7, 8) %>%
pack_rows(group_label = 'Quad Tightness', 9, 10) %>%
pack_rows(group_label = 'Con. Asymmetry', 11, 12) %>%
pack_rows(group_label = 'Ecc. Asymmetry', 13, 14) %>%
pack_rows(group_label = 'Landing Asymmetry', 15, 16)
output_stat <- as.data.frame(output_stat)
names(output_stat) <- c('Pain', 'Hip Weakness', 'Lat', 'Calf', 'Quad', 'Con. Asymm', 'Ecc. Asymm', 'Land. Asymm')
View(output_stat)
output         <- table(c(1:18))
output_stat    <- table(c(1:9))
for (test1 in tests) {
temp         <- table(c('Y', 'N'), c('Y', 'N'))
temp_stat    <- table(1)
for (test2 in tests) {
test_table <- table(data[[test1]], data[[test2]],
dnn = c(test1, test2))
ctable     <- prop.table(test_table)
temp       <- cbind(temp,
ctable * 100)
p_val      <- fisher.test(test_table)$p.value
temp_stat  <- cbind(temp_stat,
p_val)
}
output       <- rbind(output, temp)
output_stat  <- rbind(output_stat, temp_stat)
}
output         <- output[2:nrow(output), 3:ncol(output)]
output_stat    <- output_stat[2:nrow(output_stat), 2:ncol(output_stat)]
output %>%
kable(
col.names = c('Pain',
'N', 'Y',
'N', 'Y',
'N', 'Y',
'N', 'Y',
'N', 'Y',
'Low', 'High',
'Low', 'High',
'Low', 'High'),
align = 'c',
digits = 2
) %>%
kable_styling(
bootstrap_options = c('striped', 'hover')
) %>%
add_header_above(
c('',
'Pain' = 2,
'Hip'  = 2,
'Lat'  = 2,
'Calf' = 2,
'Quad' = 2,
'Con. Asymm' = 2,
'Ecc. Asymm' = 2,
'Land. Asymm' = 2
)
) %>%
column_spec(1, bold = TRUE) %>%
column_spec(c(3, 5, 7, 9, 11, 13, 15), border_right = TRUE) %>%
pack_rows(group_label = 'Hip Weakness', 3, 4) %>%
pack_rows(group_label = 'Lat Tightness', 5, 6) %>%
pack_rows(group_label = 'Calf Tightness', 7, 8) %>%
pack_rows(group_label = 'Quad Tightness', 9, 10) %>%
pack_rows(group_label = 'Con. Asymmetry', 11, 12) %>%
pack_rows(group_label = 'Ecc. Asymmetry', 13, 14) %>%
pack_rows(group_label = 'Landing Asymmetry', 15, 16)
output_stat <- as.data.frame(output_stat)
names(output_stat) <- c('Pain', 'Hip Weakness', 'Lat', 'Calf', 'Quad', 'Con. Asymm', 'Ecc. Asymm', 'Land. Asymm')
row.names(output_stat) <- c('Pain', 'Hip', 'Lat', 'Calf', 'Quad', 'Con. Asymm', 'Ecc. Asymm', 'Land. Asymm')
output_stat %>%
kable(
caption = "p-values from Fisher's Exact Test. Values <0.05 are significant",
digits  = 3,
align = 'c'
) %>%
kable_styling(
bootstrap_options = c('striped', 'hover')
)
#| label: table-count
#| tbl-cap-location: bottom
#| tbl-cap:
#| - 'Contigency Table'
#| - "p-values from Fisher's Exact Test. Values <0.05 are significant."
#| layout-ncol: 1
#| layout-nrow: 4
library(data.table)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(knitr)
library(vtable)
library(dplyr)
library(kableExtra)
library(corrplot)
data <- read.csv(file = '../Data/pro_skills_testing.csv') %>%
mutate(jump_height = jump_height*2.54, Team = gsub('/', '_', Team), Athlete = paste(First, Last, sep = " "))
data <- data[!is.na(data$jump_height),]
norms_cmj <- read.csv(file = '../Data/norms_basketball.csv')
data <- data %>%
mutate(
high_con  = ifelse(con_mean_force_assym >= 0.1, 'Y', 'N'),
high_ecc  = ifelse(ecc_mean_force_assym >= 0.1, 'Y', 'N'),
high_land = ifelse(peak_assym >= 0.1, 'Y', 'N')
)
tests <- c('pain', 'gator', 'lat', 'calf', 'quad', 'high_con', 'high_ecc', 'high_land')
output         <- table(c(1:18))
output_stat    <- table(c(1:9))
for (test1 in tests) {
temp         <- table(c('Y', 'N'), c('Y', 'N'))
temp_stat    <- table(1)
for (test2 in tests) {
test_table <- table(data[[test1]], data[[test2]],
dnn = c(test1, test2))
ctable     <- prop.table(test_table)
temp       <- cbind(temp,
ctable * 100)
p_val      <- fisher.test(test_table)$p.value
temp_stat  <- cbind(temp_stat,
p_val)
}
output       <- rbind(output, temp)
output_stat  <- rbind(output_stat, temp_stat)
}
output         <- output[2:nrow(output), 3:ncol(output)]
output_stat    <- output_stat[2:nrow(output_stat), 2:ncol(output_stat)]
output %>%
kable(
col.names = c('Pain',
'N', 'Y',
'N', 'Y',
'N', 'Y',
'N', 'Y',
'N', 'Y',
'Low', 'High',
'Low', 'High',
'Low', 'High'),
align = 'c',
digits = 2
) %>%
kable_styling(
bootstrap_options = c('striped', 'hover')
) %>%
add_header_above(
c('',
'Pain' = 2,
'Hip'  = 2,
'Lat'  = 2,
'Calf' = 2,
'Quad' = 2,
'Con. Asymm' = 2,
'Ecc. Asymm' = 2,
'Land. Asymm' = 2
)
) %>%
column_spec(1, bold = TRUE) %>%
column_spec(c(3, 5, 7, 9, 11, 13, 15), border_right = TRUE) %>%
pack_rows(group_label = 'Hip Weakness', 3, 4) %>%
pack_rows(group_label = 'Lat Tightness', 5, 6) %>%
pack_rows(group_label = 'Calf Tightness', 7, 8) %>%
pack_rows(group_label = 'Quad Tightness', 9, 10) %>%
pack_rows(group_label = 'Con. Asymmetry', 11, 12) %>%
pack_rows(group_label = 'Ecc. Asymmetry', 13, 14) %>%
pack_rows(group_label = 'Landing Asymmetry', 15, 16)
output_stat <- as.data.frame(output_stat)
names(output_stat) <- c('Pain', 'Hip Weakness', 'Lat', 'Calf', 'Quad', 'Con. Asymm', 'Ecc. Asymm', 'Land. Asymm')
row.names(output_stat) <- c('Pain', 'Hip', 'Lat', 'Calf', 'Quad', 'Con. Asymm', 'Ecc. Asymm', 'Land. Asymm')
output_stat %>%
kable(
caption = "p-values from Fisher's Exact Test. Values <0.05 are significant",
digits  = 3,
align = 'c'
) %>%
kable_styling(
bootstrap_options = c('striped', 'hover')
)
output_stat %>%
kable(
caption = "p-values from Fisher's Exact Test. Values <0.05 are significant",
digits  = 3,
align = 'c'
) %>%
kable_styling(
bootstrap_options = c('striped', 'hover')
)
# Countermovement Jump Results
```{r}
#| label: fig-cmj
#| fig-cap: "Distributions of CMJ results"
#| fig-subcap:
#|   - "Countermovement Jump Height, in centimeters"
#|   - "Reactive Strength Index - Modified, in m/s"
#| layout-ncol: 2
ggplot(data, mapping = aes(x = jump_height)) +
geom_rect(xmin = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '25th'],
xmax = norms_cmj$'Jump.Height..cm.'[norms_cmj$Percentile == '75th'],
ymin = 0,
ymax = Inf,
fill = 'grey',
alpha = 0.3) +
geom_density(fill = 'red', alpha = 0.5) +
xlab('Countermovement Jump Height') +
ylab(element_blank()) +
theme(axis.text.y = element_blank(),
axes.ticks.y = element_blank())
ggplot(data, mapping = aes(x = rsi)) +
geom_rect(xmin = norms_cmj$"Modified.RSI..m.s."[norms_cmj$Percentile == '25th'],
xmax = norms_cmj$"Modified.RSI..m.s."[norms_cmj$Percentile == '75th'],
ymin = 0,
ymax = Inf,
fill = 'grey',
alpha = 0.3) +
geom_density(fill = 'red', alpha = 0.5) +
xlab('Reactive Strength Index - Modified') +
ylab(element_blank()) +
theme(axis.text.y = element_blank(),
axes.ticks.y = element_blank())
::: {#cmj-text}
|    The countermovement jump is an excellent measure of lower body power and explosiveness. Through the use of the Vald ForceDecks, we are able to accurately measure the force an athlete produces over time, which leads to a precise measurement of the athlete's jump height alongside a range of other useful metrics, such as peak power, the duration of different phases of the jump, and the Reactive Strength Index - Modified (mRSI).
</p>
[^1]: Normative data from: https://hub.valdperformance.com/app/reports/dataReports
{{< pagebreak >}}
# Gator Plank
```{r}
#| label: fig-agility
#| fig-cap: 'Distribution of Gator Plank Results'
#| fig-subcap:
#|   - 'Count of Athletes'
#| layout-ncol: 1
ggplot(data, mapping = aes(x = gator)) +
geom_histogram(stat = 'count', color = 'black', fill = 'red', alpha = 0.5) +
xlab('Gator Plank Hip Strength Assessment') +
theme_classic()
::: {agi-text}
|    The Gator Plank Hip Strength assessment is a test used to evaluate the relative hip strength of an athlete in the frontal plane. Being strong enough to support one's bodyweight in the side plank position shows healthy muscular development, which should correlate with a reduced rate of injury in athletes. If the athlete was marked as "Yes," then they were able to successfully perform the assessment.
</p>
{{< pagebreak >}}
# FMS Overhead Squat
```{r}
#| label: fig-FMS
#| fig-cap: 'Count of Athletes by FMS Squat Results'
#| fig-subcap:
#|   - 'Calf tightness as shown by Overhead Squat'
#|   - 'Lat tightness as shown by Overhead Squat'
#| layout-ncol: 2
ggplot(data, mapping = aes(x = calf)) +
geom_histogram(color = 'black', fill = 'red', alpha = 0.5, stat = 'count') +
xlab('FMS Overhead Squat Calf Tightness') +
theme_classic()
ggplot(data, mapping = aes(x = lat)) +
geom_histogram(color = 'black', fill = 'red', alpha = 0.5, stat = 'count') +
xlab('FMS Overhead Squat Lat Tightness') +
theme_classic()
ggplot(data, mapping = aes(x = lat)) +
geom_histogram(color = 'black', fill = 'red', alpha = 0.5, stat = 'count') +
xlab('FMS Overhead Squat Lat Tightness') +
theme_classic()
::: {fms-text}
|    The Functional Movement Screen™ is a battery of several assessments that look to determine the quality of an athlete's movement patterns. While performing the entire FMS™ screen gives a more comprehensive look into an athlete's movement, the overhead squat, as a single assessment, provides a holistic look into the entire body as an entire system working together. The squat looks at an athlete's ability to reach good depth while maintaining a relatively upright posture, shoulder flexion in keeping the bar overhead, and weight balanced both between the left and right feet and over the middle of the foot. This allows the practitioner to assess the athlete's movement capabilities across the whole body at once. During this assessment, we looked at whether tightness in the calves and/or lats were the limiting factor. A 'Yes' indicates tightness in that particular area.
</p>
{{< pagebreak >}}
# Raw Data
```{r}
#| output: asis
#| output: asis
#sumtable(select(data, Athlete, jump_height, rsi, gator, calf, lat, -Team), simple.kable = TRUE)
data %>%
select(-Team, -Last, -First, -event) %>%
relocate(Athlete) %>%
arrange(by = Athlete) %>%
kable(caption = 'Raw data from testing.',
digits = 2,
format.args = list(scientific = FALSE),
col.names = c('Athlete',
'Jump Height',
'mRSI',
'Mean Force Asymm.', 'Asymm Side',
'Mean Force Asymm.', 'Asymm Side',
'Mean Force Asymm.', 'Asymm Side',
'Pain',
'Hip Weakness',
'Calf',
'Lat',
'Quad'),
row.names = FALSE) %>%
kable_styling(bootstrap_options = 'striped') %>%
add_header_above(
c('',
'CMJ'        = 2,
'Eccentric'  = 2,
'Concectric' = 2,
'Landing'    = 2,
'',
'',
'Tightness'  = 3)
)
#| output: asis
data <- read.csv(file = '../Data/pro_skills_testing.csv') %>%
mutate(jump_height = jump_height*2.54, Team = gsub('/', '_', Team), Athlete = paste(First, Last, sep = " "))
data <- data[!is.na(data$jump_height),]
data %>%
select(-Team, -Last, -First, -event) %>%
relocate(Athlete) %>%
arrange(by = Athlete) %>%
kable(caption = 'Raw data from testing.',
digits = 2,
format.args = list(scientific = FALSE),
col.names = c('Athlete',
'Jump Height',
'mRSI',
'Mean Force Asymm.', 'Asymm Side',
'Mean Force Asymm.', 'Asymm Side',
'Mean Force Asymm.', 'Asymm Side',
'Pain',
'Hip Weakness',
'Calf',
'Lat',
'Quad'),
row.names = FALSE) %>%
kable_styling(bootstrap_options = 'striped') %>%
add_header_above(
c('',
'CMJ'        = 2,
'Eccentric'  = 2,
'Concectric' = 2,
'Landing'    = 2,
'',
'',
'Tightness'  = 3)
)
source("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Basketball Reporting/HTML Scripts/Make HTML Reports.R")
source("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Basketball Reporting/HTML Scripts/Make HTML Reports.R")
source("C:/Users/Caitie Mayo/Desktop/GitHub/arch-sports/Basketball Reporting/HTML Scripts/Make HTML Reports.R")
