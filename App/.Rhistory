source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
library(dplyr)
items <-
readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv'
) %>% select(-num_id,-sell_currency,-buy_currency,-games_id,-id_full) %>%
unique() %>%
head(100)
villagers <-
readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/villagers.csv'
) %>%
select(-row_n) %>%
unique()
library(dplyr)
items <-
readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv'
) %>% select(-num_id,-sell_currency,-buy_currency,-games_id,-id_full) %>%
unique() %>%
head(100)
villagers <-
readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/villagers.csv'
) %>%
select(-row_n) %>%
unique()
View(villagers)
View(items)
install.packages('DT')
library(DT)
datatable(villages[,1:8])
datatable(villagers[,1:8])
datatable(villagers,
options = list(paging = TRUE,    ## paginate the output
pageLength = 15,  ## number of rows to output for each page
scrollX = TRUE,   ## enable scrolling on X axis
scrollY = TRUE,   ## enable scrolling on Y axis
autoWidth = TRUE, ## use smart column width handling
server = FALSE,   ## use client-side processing
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
columnDefs = list(list(targets = '_all', className = 'dt-center'),
list(targets = c(0, 8, 9), visible = FALSE))
),
extensions = 'Buttons',
selection = 'single', ## enable selection of a single row
filter = 'bottom',              ## include column filters at the bottom
rownames = FALSE                ## don't show row numbers/names
)
library(shiny)
ui <- fluidPage(titlePanel("DT table in Shiny"),
mainPanel(width = 12,
DT::dataTableOutput("mytable")))
server <- function(input, output) {
output$mytable <- DT::renderDataTable(villagers,
options = list(scrollX = TRUE),
rownames = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(titlePanel("DT table in Shiny"),
mainPanel(width = 12,
DT::dataTableOutput("mytable")))
server <- function(input, output) {
output$mytable <- DT::renderDataTable(villagers,
options = list(scrollX = TRUE,),
rownames = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(titlePanel("DT table in Shiny"),
mainPanel(width = 12,
DT::dataTableOutput("mytable")))
server <- function(input, output) {
output$mytable <- DT::renderDataTable(villagers,
options = list(scrollX = TRUE),
selection = 'single',
rownames = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
icon_villagers <- villagers %>%
mutate(gender = ifelse(gender == "female",
as.character(icon("venus", lib = "font-awesome")),
as.character(icon("mars", lib = "font-awesome"))))
datatable(icon_villagers[,1:8],
options = list(scrollX = TRUE),
escape = FALSE)
install.packages('formattable')
library(formattable)
## Prepare the item data
pic_items <- items %>%
mutate(picture = ifelse(!is.na(image_url),
paste0("<img src=\"",image_url, "\" height=\"30\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"", name, "\"></img>"),
as.character(icon("question", lib = "font-awesome")))) %>%
select(picture, name, category, orderable, sell_value, buy_value) %>%
unique()
## A formatter function to format TRUE/FALSE values
true_false_formatter <-
formatter("span",
style = x ~ style(
font.weight = "bold",
color = ifelse(x == TRUE, "forestgreen", ifelse(x == FALSE, "red", "black"))
))
## Use formattable
formattable(
head(pic_items),
list(
## colour this column in a white to pink gradiant by value
`sell_value` = color_tile("white", "pink"),
## a coloured bar with length proportional to value
`buy_value` = color_bar("lightblue"),
## use custom formatter for TRUE/FALSE values
orderable = true_false_formatter
)
)
install.packages(tidymodels)
install.packages('tidymodels')
library(tidymodels)
set.seed(1234)
View(items)
data("cars")
force(cars)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_hline(yintercept = mean(cars$dist),
col = 'red')
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ poly(x, 8),
col = 'red', se = FALSE)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ x,
col = 'red',
se = FALSE)
install.packages('rlang')
library(Metrics)
install.packages('Metrics')
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(test_data)
View(test_data2)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
lm_spec <- linear_reg() %>%
set_engine(engine = 'lm')
lm_spec
View(lm_spec)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(train_results)
View(train_fit)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(test_results)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
data(cars)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_hline(yintercept = mean(cars$dist),)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_hline(yintercept = mean(cars$dist),
col = 'red')
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ poly(x, 8),
col = 'red', se = FALSE)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ poly(x, 8),
col = 'red', se = TRUE)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ x,
col = 'red', se = TRUE)
ggplotly(ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ x,
col = 'red', se = TRUE))
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
install.packages('glmnet')
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(rmse_train7)
View(results_grid)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
max(results_grid$mean)
results_grid$penalty[mean = max(mean)]
results_grid[mean = max(mean)]
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(results_grid)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/hello.R")
yn <- function(x) factor(x, 0:1, c('yes', 'no'))
View(yn)
yn(1)
posSe <- 10
yn(posSe)
yn(0)
setwd("C:/Users/tjc52/architech_sports/arch-sports/App")
getwd()
read.csv('Data/Ballantyne/Ballantyne_Test.csv') %>% summary()
library(dplyr)
read.csv('Data/Ballantyne/Ballantyne_Test.csv') %>% summary()
data <- read.csv('Data/Ballantyne/Ballantyne_Test.csv')
head(data$Nordbord...Diff)
View(data)
rm(data)
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
read.csv('Data/Ballantyne/Ballantyne_Test.csv') %>% summary()
read.csv('Data/Ballantyne/Ballantyne_Test.csv') %>% head()
library(tidyverse)
library(reshape2)
read.csv('Data/Ballantyne/Ballantyne_Test.csv') %>% melt()
read.csv('Data/Ballantyne/Ballantyne_Test.csv') %>% select(-c('Age At Testing')) %>% melt()
read.csv('Data/Ballantyne/Ballantyne_Test.csv') %>% select(-c('Age.At.Testing')) %>% melt()
install.packages('vtable')
read.csv('Data/Ballantyne/Ballantyne_Test.csv') %>% sumtable()
?vtable
??vtable
library(vtable)
read.csv('Data/Ballantyne/Ballantyne_Test.csv') %>% sumtable()
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
library(tidyverse)
library(dplyr)
setwd(getSrcDirectory(function(){}))
getwd()
library(tidyverse)
library(dplyr)
setwd(getSrcDirectory(function(){}))
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
View(testData)
locations <- list("Ballantyne", "Pineville")
#Training Data URLs
train.URL <- list(
"Ballantyne" = "https://docs.google.com/spreadsheets/d/1MY7WtWH4ba4npaUHOYmZ4OotMZwp8k_jVTCBhqOSeyU/"
)
#Testing Data URLs
test.URL <- list(
"Ballantyne" = "https://docs.google.com/spreadsheets/d/1VzdlsDCA-X8HVKvUktG1A5XZNiq3IuOwX2Zbq8k6Iu0/",
"Pineville" = "https://docs.google.com/spreadsheets/d/1Ze4abQWHOchEDLOo0p-JP4ZgkBDxDyb_P4_HSzA4ipg"
)
#Testing Data Sheet Names
test.Sheets <- list(
"Ballantyne" = 'MASTER DATA TABLE',
"Pineville" = 'MASTER DATA TABLE'
)
#Training Data Sheet Names
train.Sheets <- list(
"Ballantyne" = 'TRAINING DATA'
)
#Create list of dataframes
testData = list()
trainData = list()
#Read data into csv
for (location in locations) {
#Create location directories if they do not exist already
dir.create(paste('Data/', location, sep = ""), showWarnings = FALSE)
#Testing data
path <- paste('Data/', location, sep = "")
file_name <- paste(location, '_Test.csv', sep = "")
if(!file.exists(file.path(path, file_name))){
read_sheet(as.character(test.URL[location]), as.character(test.Sheets[location])) %>%
write.csv(file = file.path(path, file_name), row.names = FALSE)
}
append(testData, list(location = read.csv(file = file.path(path, file_name))))
#Training data
if(location %in% names(train.URL)){
path <- paste('Data/', location, sep = "")
file_name <- paste(location, '_Training.csv', sep = "")
if(!file.exists(file.path(path, file_name))){
read_sheet(as.character(train.URL[location]), as.character(train.Sheets[location])) %>%
write.csv(file = file.path(path, file_name), row.names = FALSE)
}
}
append(trainData, list(location = read.csv(file = file.path(path, file_name))))
}
locations <- list("Ballantyne", "Pineville")
#Training Data URLs
train.URL <- list(
"Ballantyne" = "https://docs.google.com/spreadsheets/d/1MY7WtWH4ba4npaUHOYmZ4OotMZwp8k_jVTCBhqOSeyU/"
)
#Testing Data URLs
test.URL <- list(
"Ballantyne" = "https://docs.google.com/spreadsheets/d/1VzdlsDCA-X8HVKvUktG1A5XZNiq3IuOwX2Zbq8k6Iu0/",
"Pineville" = "https://docs.google.com/spreadsheets/d/1Ze4abQWHOchEDLOo0p-JP4ZgkBDxDyb_P4_HSzA4ipg"
)
#Testing Data Sheet Names
test.Sheets <- list(
"Ballantyne" = 'MASTER DATA TABLE',
"Pineville" = 'MASTER DATA TABLE'
)
#Training Data Sheet Names
train.Sheets <- list(
"Ballantyne" = 'TRAINING DATA'
)
#Create list of dataframes
testData = list()
trainData = list()
#Read data into csv
for (location in locations) {
#Create location directories if they do not exist already
dir.create(paste('Data/', location, sep = ""), showWarnings = FALSE)
#Testing data
path <- paste('Data/', location, sep = "")
file_name <- paste(location, '_Test.csv', sep = "")
if(!file.exists(file.path(path, file_name))){
read_sheet(as.character(test.URL[location]), as.character(test.Sheets[location])) %>%
write.csv(file = file.path(path, file_name), row.names = FALSE)
}
data <- read.csv(file = file.path(path, file_name))
append(testData, list(location = data))
#Training data
if(location %in% names(train.URL)){
path <- paste('Data/', location, sep = "")
file_name <- paste(location, '_Training.csv', sep = "")
if(!file.exists(file.path(path, file_name))){
read_sheet(as.character(train.URL[location]), as.character(train.Sheets[location])) %>%
write.csv(file = file.path(path, file_name), row.names = FALSE)
}
}
data <- read.csv(file = file.path(path, file_name))
append(trainData, list(location = data))
}
#Create location directories if they do not exist already
dir.create(paste('Data/', location, sep = ""), showWarnings = FALSE)
#Testing data
path <- paste('Data/', location, sep = "")
file_name <- paste(location, '_Test.csv', sep = "")
if(!file.exists(file.path(path, file_name))){
read_sheet(as.character(test.URL[location]), as.character(test.Sheets[location])) %>%
write.csv(file = file.path(path, file_name), row.names = FALSE)
}
data <- read.csv(file = file.path(path, file_name))
append(testData, list(location = data))
testData
testData$location
#Training data
if(location %in% names(train.URL)){
path <- paste('Data/', location, sep = "")
file_name <- paste(location, '_Training.csv', sep = "")
if(!file.exists(file.path(path, file_name))){
read_sheet(as.character(train.URL[location]), as.character(train.Sheets[location])) %>%
write.csv(file = file.path(path, file_name), row.names = FALSE)
}
}
data <- read.csv(file = file.path(path, file_name))
append(trainData, list(location = data))
locations <- list("Ballantyne", "Pineville")
#Testing Data URLs
test.URL <- list(
"Ballantyne" = "https://docs.google.com/spreadsheets/d/1VzdlsDCA-X8HVKvUktG1A5XZNiq3IuOwX2Zbq8k6Iu0/",
"Pineville" = "https://docs.google.com/spreadsheets/d/1Ze4abQWHOchEDLOo0p-JP4ZgkBDxDyb_P4_HSzA4ipg"
)
#Training Data URLs
train.URL <- list(
"Ballantyne" = "https://docs.google.com/spreadsheets/d/1MY7WtWH4ba4npaUHOYmZ4OotMZwp8k_jVTCBhqOSeyU/"
)
locations <- list("Ballantyne", "Pineville")
#Testing Data URLs
test.URL <- list(
"Ballantyne" = "https://docs.google.com/spreadsheets/d/1VzdlsDCA-X8HVKvUktG1A5XZNiq3IuOwX2Zbq8k6Iu0/",
"Pineville" = "https://docs.google.com/spreadsheets/d/1Ze4abQWHOchEDLOo0p-JP4ZgkBDxDyb_P4_HSzA4ipg"
)
#Training Data URLs
train.URL <- list(
"Ballantyne" = "https://docs.google.com/spreadsheets/d/1MY7WtWH4ba4npaUHOYmZ4OotMZwp8k_jVTCBhqOSeyU/"
)
#Testing Data Sheet Names
test.Sheets <- list(
"Ballantyne" = 'MASTER DATA TABLE',
"Pineville" = 'MASTER DATA TABLE'
)
#Training Data Sheet Names
train.Sheets <- list(
"Ballantyne" = 'TRAINING DATA'
)
#Create list of dataframes
testData = list()
trainData = list()
names(testData) <- names(test.URL)
locations <- list("Ballantyne", "Pineville")
#Testing Data URLs
test.URL <- list(
"Ballantyne" = "https://docs.google.com/spreadsheets/d/1VzdlsDCA-X8HVKvUktG1A5XZNiq3IuOwX2Zbq8k6Iu0/",
"Pineville" = "https://docs.google.com/spreadsheets/d/1Ze4abQWHOchEDLOo0p-JP4ZgkBDxDyb_P4_HSzA4ipg"
)
#Training Data URLs
train.URL <- list(
"Ballantyne" = "https://docs.google.com/spreadsheets/d/1MY7WtWH4ba4npaUHOYmZ4OotMZwp8k_jVTCBhqOSeyU/"
)
#Testing Data Sheet Names
test.Sheets <- list(
"Ballantyne" = 'MASTER DATA TABLE',
"Pineville" = 'MASTER DATA TABLE'
)
#Training Data Sheet Names
train.Sheets <- list(
"Ballantyne" = 'TRAINING DATA'
)
#Create list of dataframes
testData = vector(mode = 'list', length = length(names(test.URL)))
trainData = vector(mode = 'list', length = length(names(train.URL)))
names(testData) <- names(test.URL)
names(trainData) <- names(train.URL)
View(testData)
#Read data into csv
for (location in locations) {
#Create location directories if they do not exist already
dir.create(paste('Data/', location, sep = ""), showWarnings = FALSE)
#Testing data
path <- paste('Data/', location, sep = "")
file_name <- paste(location, '_Test.csv', sep = "")
if(!file.exists(file.path(path, file_name))){
read_sheet(as.character(test.URL[location]), as.character(test.Sheets[location])) %>%
write.csv(file = file.path(path, file_name), row.names = FALSE)
}
testData[[location]] <- read.csv(file = file.path(path, file_name))
#Training data
if(location %in% names(train.URL)){
path <- paste('Data/', location, sep = "")
file_name <- paste(location, '_Training.csv', sep = "")
if(!file.exists(file.path(path, file_name))){
read_sheet(as.character(train.URL[location]), as.character(train.Sheets[location])) %>%
write.csv(file = file.path(path, file_name), row.names = FALSE)
}
}
trainData[[location]] <- read.csv(file = file.path(path, file_name))
}
View(testData)
View(trainData)
#Create location directories if they do not exist already
dir.create(paste('Data/', location, sep = ""), showWarnings = FALSE)
location <- 'Pineville'
#Create location directories if they do not exist already
dir.create(paste('Data/', location, sep = ""), showWarnings = FALSE)
#Testing data
path <- paste('Data/', location, sep = "")
file_name <- paste(location, '_Test.csv', sep = "")
if(!file.exists(file.path(path, file_name))){
read_sheet(as.character(test.URL[location]), as.character(test.Sheets[location])) %>%
write.csv(file = file.path(path, file_name), row.names = FALSE)
}
testData[[location]] <- read.csv(file = file.path(path, file_name))
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
View(trainData)
View(trainData[["Pineville"]])
#Create location directories if they do not exist already
dir.create(paste('Data/', location, sep = ""), showWarnings = FALSE)
#Testing data
path <- paste('Data/', location, sep = "")
file_name <- paste(location, '_Test.csv', sep = "")
if(!file.exists(file.path(path, file_name))){
read_sheet(as.character(test.URL[location]), as.character(test.Sheets[location])) %>%
write.csv(file = file.path(path, file_name), row.names = FALSE)
}
testData[[location]] <- read.csv(file = file.path(path, file_name))
#Training data
if(location %in% names(train.URL)){
path <- paste('Data/', location, sep = "")
file_name <- paste(location, '_Training.csv', sep = "")
if(!file.exists(file.path(path, file_name))){
read_sheet(as.character(train.URL[location]), as.character(train.Sheets[location])) %>%
write.csv(file = file.path(path, file_name), row.names = FALSE)
}
}
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
trainData$Ballantyne
testData$Pineville
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
testData$Ballantyne
head(testData$Pineville)
