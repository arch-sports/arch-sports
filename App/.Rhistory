runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
data_time <- as_tbl_time(na.omit(train.data), index = DATE)
View(data_time)
filtered_data <- filter_time(data_time, time_formula = "1/22/2024" ~ "2/16/2022")
data_time_sorted %>%
as_tbl_time(na.omit(train.data), index = DATE)) %>%
data_time_sorted %>%
as_tbl_time(na.omit(train.data), index = DATE) %>%
arrange(DATE, .by_group = FALSE) %>%
filtered_data <- filter_time(time_formula = "1/22/2024" ~ "2/16/2022")
data_time %>%
as_tbl_time(na.omit(train.data), index = DATE) %>%
arrange(DATE, .by_group = FALSE) %>%
filtered_data <- filter_time(time_formula = "1/22/2024" ~ "2/16/2022")
data_time %>%
arrange(DATE, .by_group = FALSE) %>%
as_tbl_time(na.omit(train.data), index = DATE) %>%
filtered_data <- filter_time(time_formula = "1/22/2024" ~ "2/16/2022")
data_time <- as_tbl_time(na.omit(train.data), index = DATE)
filtered_data <- filter_time(data_time, time_formula = '1/22/2024' ~ '2'16'2024')
data_time <- as_tbl_time(na.omit(train.data), index = DATE)
filtered_data <- filter_time(data_time, time_formula = '1/22/2024' ~ '2/16/2024')
filtered_data_lift <- filter(filtered_data, EXERCISE == 'Back Squat')
View(filtered_data_lift)
View(filtered_data)
data_time <- as_tbl_time(na.omit(train.data), index = DATE)
filtered_data <- filter_time(data_time, time_formula = '2024-01-22' ~ '2024-02-16')
filtered_data_lift <- filter(filtered_data, EXERCISE == 'Back Squat')
View(filtered_data)
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard - Local.R')
runApp('Architech DB/Basic Dashboard.R')
sub_airline <- read_csv("lax_to_jfk/lax_to_jfk.csv",
col_types = cols('DivDistance' = col_number(),
'DivArrDelay' = col_number()))
install.packages(c("ragg", "stringi"))
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Exploratory Data Analysis.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
View(aa_delays)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
summary(linear_model)
summary(linear_model)$r.squared
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Model Development.R")
install.packages("plotly")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("car")
install.packages("babynames")
install.packages("gapminder")
library(plotly)
library(dplyr)
library(carData)
library(gapminder)
library(babynames)
p <- ggplot(data = iris, aes(Petal.Length, Sepal.Lenght)) +
geom_point(aes(color = Species)) +
ggtitle("Petal Length vs Sepal Length")
p
p <- ggplot(data = iris, aes(Petal.Length, Sepal.Length)) +
geom_point(aes(color = Species)) +
ggtitle("Petal Length vs Sepal Length")
p
ggplotly(p)
p1 <- ggplot(data = cars, aes(dist, speed)) + geom_point() +
ggtitle("Stopping Distance vs Speed")
p1 <- ggplot(data = cars, aes(dist, speed)) + geom_point() +
ggtitle("Stopping Distance vs Speed") +
xlab("Stopping Distance in Feet") +
ylab("Speed (mph)")
p1
ggplotly(p1)
p2 <- ggplot(mpg, aes(manufacturer)) + geom_bar(aes(fill = drv)) +
ggtitle("Distribution for Cars based on Drive Type and Manufacturers")
p2
ggplotly(p2)
babyData <- babynames %>% filter(name %in% c(
'Florence', 'Harriette', 'Emma', 'Bertha', 'Chloe', 'Sarah')) %>% filter(sex =='F')
p3 <- ggplot(BabyData, aes(x = year, y = n, fill = name, text = name)) + geom_area() +
ggtitle('Yearwise popularity of american baby names')
p3 <- ggplot(babyData, aes(x = year, y = n, fill = name, text = name)) + geom_area() +
ggtitle('Yearwise popularity of american baby names')
p3
ggplotly(p3)
airQuality_plot <- ggplot(airquality, aes(x = Day, y = Ozone,
color= as.factor(Month),
text = paste("Month:", Month))) +
geom_point(size = airquality$Wind) +
ggtitle("Air Quality in New York by Day") +
labs(x = "Day of the month", y = "Ozone (ppb)", color="Month") +
scale_x_continuous(breaks = seq(1, 31, 5))+
scale_size(range = c(1, 10))
ggplotly(airQuality_plot, tooltip = c('text', 'x', 'y'))
anim_plot <- ggplot(txhousing, aes(month, median)) +
geom_line(aes(group = year), alpha = 0.3) +
geom_smooth() +
geom_line(aes(frame = year, ids = month), color = 'red') +
facet_wrap(~city)
anim_plot
ggplot(p, width = 1500, height = 900) %>%
animation_opts(1000)
ggplot(anim_plot, width = 1500, height = 900) %>%
animation_opts(1000)
anim_plot <- ggplot(txhousing, aes(month, median)) +
geom_line(aes(group = year), alpha = 0.3) +
geom_smooth() +
geom_line(aes(frame = year, ids = month), color = "red") +
facet_wrap(~ city)
ggplotly(p, width = 1500, height = 900) %>%
animation_opts(1000)
ggplotly(anim_plot, width = 1500, height = 900) %>%
animation_opts(1000)
ggplot(mpg, aes(manufacturer)) + geom_bar(aes(fill = drv)) +
ggtitle("Distribution for Cars based on Drive Type and Manufacturers") %>% ggplotly()
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/plotly_practice.R")
library(dplyr)
items <-
readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv'
) %>% select(-num_id,-sell_currency,-buy_currency,-games_id,-id_full) %>%
unique() %>%
head(100)
villagers <-
readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/villagers.csv'
) %>%
select(-row_n) %>%
unique()
library(dplyr)
items <-
readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv'
) %>% select(-num_id,-sell_currency,-buy_currency,-games_id,-id_full) %>%
unique() %>%
head(100)
villagers <-
readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/villagers.csv'
) %>%
select(-row_n) %>%
unique()
View(villagers)
View(items)
install.packages('DT')
library(DT)
datatable(villages[,1:8])
datatable(villagers[,1:8])
datatable(villagers,
options = list(paging = TRUE,    ## paginate the output
pageLength = 15,  ## number of rows to output for each page
scrollX = TRUE,   ## enable scrolling on X axis
scrollY = TRUE,   ## enable scrolling on Y axis
autoWidth = TRUE, ## use smart column width handling
server = FALSE,   ## use client-side processing
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
columnDefs = list(list(targets = '_all', className = 'dt-center'),
list(targets = c(0, 8, 9), visible = FALSE))
),
extensions = 'Buttons',
selection = 'single', ## enable selection of a single row
filter = 'bottom',              ## include column filters at the bottom
rownames = FALSE                ## don't show row numbers/names
)
library(shiny)
ui <- fluidPage(titlePanel("DT table in Shiny"),
mainPanel(width = 12,
DT::dataTableOutput("mytable")))
server <- function(input, output) {
output$mytable <- DT::renderDataTable(villagers,
options = list(scrollX = TRUE),
rownames = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(titlePanel("DT table in Shiny"),
mainPanel(width = 12,
DT::dataTableOutput("mytable")))
server <- function(input, output) {
output$mytable <- DT::renderDataTable(villagers,
options = list(scrollX = TRUE,),
rownames = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(titlePanel("DT table in Shiny"),
mainPanel(width = 12,
DT::dataTableOutput("mytable")))
server <- function(input, output) {
output$mytable <- DT::renderDataTable(villagers,
options = list(scrollX = TRUE),
selection = 'single',
rownames = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
icon_villagers <- villagers %>%
mutate(gender = ifelse(gender == "female",
as.character(icon("venus", lib = "font-awesome")),
as.character(icon("mars", lib = "font-awesome"))))
datatable(icon_villagers[,1:8],
options = list(scrollX = TRUE),
escape = FALSE)
install.packages('formattable')
library(formattable)
## Prepare the item data
pic_items <- items %>%
mutate(picture = ifelse(!is.na(image_url),
paste0("<img src=\"",image_url, "\" height=\"30\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"", name, "\"></img>"),
as.character(icon("question", lib = "font-awesome")))) %>%
select(picture, name, category, orderable, sell_value, buy_value) %>%
unique()
## A formatter function to format TRUE/FALSE values
true_false_formatter <-
formatter("span",
style = x ~ style(
font.weight = "bold",
color = ifelse(x == TRUE, "forestgreen", ifelse(x == FALSE, "red", "black"))
))
## Use formattable
formattable(
head(pic_items),
list(
## colour this column in a white to pink gradiant by value
`sell_value` = color_tile("white", "pink"),
## a coloured bar with length proportional to value
`buy_value` = color_bar("lightblue"),
## use custom formatter for TRUE/FALSE values
orderable = true_false_formatter
)
)
install.packages(tidymodels)
install.packages('tidymodels')
library(tidymodels)
set.seed(1234)
View(items)
data("cars")
force(cars)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_hline(yintercept = mean(cars$dist),
col = 'red')
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ poly(x, 8),
col = 'red', se = FALSE)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ x,
col = 'red',
se = FALSE)
install.packages('rlang')
library(Metrics)
install.packages('Metrics')
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(test_data)
View(test_data2)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
lm_spec <- linear_reg() %>%
set_engine(engine = 'lm')
lm_spec
View(lm_spec)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(train_results)
View(train_fit)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(test_results)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
data(cars)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_hline(yintercept = mean(cars$dist),)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_hline(yintercept = mean(cars$dist),
col = 'red')
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ poly(x, 8),
col = 'red', se = FALSE)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ poly(x, 8),
col = 'red', se = TRUE)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ x,
col = 'red', se = TRUE)
ggplotly(ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = 'lm',
formula = y ~ x,
col = 'red', se = TRUE))
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
install.packages('glmnet')
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(rmse_train7)
View(results_grid)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
max(results_grid$mean)
results_grid$penalty[mean = max(mean)]
results_grid[mean = max(mean)]
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
View(results_grid)
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/Coursera/Model Evaluation.R")
source("C:/Users/tjc52/OneDrive/Desktop/Code/R/hello.R")
yn <- function(x) factor(x, 0:1, c('yes', 'no'))
View(yn)
yn(1)
posSe <- 10
yn(posSe)
yn(0)
if(!require(pacman)){
install.packages('pacman')
}
library(pacman)
p_load(
googlesheets4,
tidyverse,
dplyr
)
setwd(getSrcDirectory(function(){}))
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
install.packages("minqa")
testData$Ballantyne <- mutate(Date = format.Date(Date, '%m/%y'))
install.packages('zoo')
library(zoo)
testData$Ballantyne <- mutate(testData$Ballantyne, Date = as.yearmon()
)
testData$Ballantyne <- testData$Ballantyne %>% mutate(Date = as.yearmon())
testData$Ballantyne <- testData$Ballantyne %>% mutate(Date = as.yearmon(Date))
View(testData)
View(testData[["Ballantyne"]])
testData$Ballantyne$Date
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
View(testData[["Pineville"]])
View(testData[["Ballantyne"]])
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
testData$Pineville %>%
mutate(Date = as.yearmon(Date)) %>%
group_by(Date) %>%
select(Date, tests$Pineville) %>%
arrange(desc(Date))
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
install.packages('slider')
library(slider)
testData$Ballantyne$Date
lag(testData$Ballantyne$Date, n = 9)
lag(testData$Ballantyne$Date, n = 1)
testData$Ballantyne$Date
testData$Ballantyne$Date - lag(testData$Ballantyne$Date, n = 1)
testData$Ballantyne$Date - testData$Ballantyne$Date
testData$Ballantyne %>%
View(tests)
#Create list of tests
tests = vector(mode = 'list', length = length(locations))
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% mutate(across(c(Date, tests$Ballantyne), monthly = ~(. - lag(.))/lag(.)))
rlang::last_trace()
tests$Ballantyne
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(Date, 'CMJ...Flight')
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% summarise(mean = mean(.))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% summarise(mean)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% summarise(mean = mean(tests$Ballantyne))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% summarise_all(mean = mean(tests$Ballantyne))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% summarise_all()
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% summarise_all(mean)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(-c('Name', 'Age.At.Testing')) %>% summarise_all(mean)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(-c('Name', 'Age.At.Testing')) %>% summarise_all(mean, na.rm = TRUE)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(-c('Name', 'Age.At.Testing')) %>% summarise_all(mean, na.rm = TRUE)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(-c('Name', 'Age.At.Testing')) %>% summarise_all(c(mean, slide_mean(before = 1)), na.rm = TRUE)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(-c('Name', 'Age.At.Testing')) %>% summarise_all(c(mean, slide_mean(., before = 1)), na.rm = TRUE)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(-c('Name', 'Age.At.Testing')) %>% summarise_all(slide_mean(before = 2), na.rm = TRUE)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(-c('Name', 'Age.At.Testing')) %>% summarise_all(slide_mean, na.rm = TRUE)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(Date, CMJ...Flight) %>% slide_mean(before = 2)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(Date, CMJ...Flight) %>% mutate(CMJ_meanchange = slide_mean(CMJ...Flight, before = 2))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(Date, CMJ...Flight) %>% mutate(CMJ_meanchange = slide(CMJ...Flight, ~.sum(x)/2,before = 1))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(Date, CMJ...Flight) %>% mutate(CMJ_meanchange = slide(CMJ...Flight, ~.Math.sum(x)/2,before = 1))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(Date, CMJ...Flight) %>% mutate(CMJ_meanchange = slide(CMJ...Flight, ~ . Math.sum(x)/2,before = 1))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(Date, CMJ...Flight) %>% mutate(CMJ_meanchange = slide(CMJ...Flight, ~ . x/2,before = 1))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(Date, CMJ...Flight) %>% mutate(CMJ_meanchange = slide(CMJ...Flight, ~.x/2,before = 1))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(Date, CMJ...Flight) %>% mutate(new = slide(CMJ...Flight, ~.x,before = 1))
slide(1:5, ~.x)
slide(1:5, ~.x, .before = 1)
slide(1:5, ~.x + x, .before = 1)
slide(1:5, ~.x + .x, .before = 1)
slide(1:5, ~(.x + .x)/2, .before = 1)
slide(1:5, ~.x[1], .before = 1)
slide(1:5, ~(.x[1] + .x)/2, .before = 1)
slide(1:5, ~(.x[1] + .x)/2)
slide(1:5, ~((.x[1] + .x)/2), .before = 1)
slide(1:5, ~((.x[1] + .x)/2)[1], .before = 1)
slide(1:5, ~((.x[1] + .x)/2)[2], .before = 1)
slide(1:5, ~((.x[1] + .x[2])/2)[2], .before = 1)
slide(1:5, ~((.x[1] + .x[0])/2)[2], .before = 1)
slide(1:5, ~((.x[1] + .x)/2)[2], .before = 1)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% mutate(Perc_Change = slide(CMJ...Flight, ~((.x[1] + .x)/2)[2], .before = 1))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(Date, CMJ...Flight) %>% mutate(Perc_Change = slide(CMJ...Flight, ~((.x[1] + .x)/2)[2], .before = 1))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% group_by(Date) %>% select(Date, CMJ...Flight) %>% mutate(Perc_Change = slide(CMJ...Flight, ~((.x[1] + .x)/.x[1] * 100)[2], .before = 1))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% mutate(Perc_Change = slide(CMJ...Flight, ~((.x[1] + .x)/.x[1] * 100)[2], .before = 1))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean, .groups = Date)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight), .groups = Date)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight), na.rm = TRUE)
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight, na.rm = TRUE))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight, na.rm = TRUE)) %>% mutate(Perc_Change = slide(CMJ...Flight, ~((.x - .x[1])/.x[1] * 100)))
testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight, na.rm = TRUE)) %>% mutate(Perc_Change = slide(mean, ~((.x - .x[1])/.x[1] * 100)))
data <- testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight, na.rm = TRUE)) %>% mutate(Perc_Change = slide(mean, ~((.x - .x[1])/.x[1] * 100)))
View(data)
slide(testData$Ballantyne$CMJ...Flight, ~((.x - .x[1])/.x[1])*100, .before = 1)
data <- testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight, na.rm = TRUE)) %>% mutate(Perc_Change = slide(mean, ~((.x - .x[1])/.x[1] * 100)), .before = 1)
data <- testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight, na.rm = TRUE)) %>% mutate(Perc_Change = slide(mean, ~((.x - .x[1])/.x[1] * 100))[2], .before = 1)
slide(testData$Ballantyne$CMJ...Flight, ~((.x - .x[1])/.x[1]*100)[2], .before = 1)
data <- testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight, na.rm = TRUE)) %>% mutate(Perc_Change = slide(mean, ~((.x - .x[1])/.x[1] * 100)[2], .before = 1)
data <- testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight, na.rm = TRUE)) %>% mutate(Perc_Change = slide(mean, ~((.x - .x[1])/.x[1] * 100)[2], .before = 1)
data <- testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight, na.rm = TRUE)) %>% mutate(Perc_Change = slide(mean, ~((.x - .x[1])/.x[1] * 100)[2], .before = 1))
data <- testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight, na.rm = TRUE)) %>% mutate(Perc_Change = slide(mean, ~((.x - .x[1])/.x[1] * 100)[2], .before = 1)) %>% arrange(desc(Date))
slide(1:10, ~((.x + .x[1])), .before = 1)
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
perc_change(1:10)
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
perc_change(testData$Ballantyne$CMJ...Flight)
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
data <- testData$Ballantyne %>% mutate(Date = as.yearmon(Date)) %>% select(Date, CMJ...Flight) %>% group_by(Date) %>% summarize(mean = mean(CMJ...Flight, na.rm = TRUE)) %>% mutate(Perc_Change = slide(mean, ~((.x - .x[1])/.x[1] * 100)[2], .before = 1)) %>% arrange(desc(Date))
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
source("C:/Users/tjc52/architech_sports/arch-sports/App/readData.R")
